import { IconComponent, IconPropSize } from '@consta/icons/Icon';
import React from 'react';
import { AutoCompete } from '../../../utils/types/AutoComplete';
import { TextFieldPropForm, TextFieldPropId, TextFieldPropName, TextFieldPropOnChange, TextFieldPropSize, TextFieldPropStatus, TextFieldPropValue, TextFieldPropView, TextFieldPropWidth } from '../../TextField/TextField';
import { EventInterceptorHandler } from '../EventInterceptor';
export declare type Props = {
    className?: string;
    value?: TextFieldPropValue;
    onChange?: TextFieldPropOnChange;
    id?: TextFieldPropId;
    name?: TextFieldPropName;
    type?: string;
    disabled?: boolean;
    cols?: number;
    maxLength?: number;
    size?: TextFieldPropSize;
    view?: TextFieldPropView;
    form?: TextFieldPropForm;
    state?: TextFieldPropStatus;
    width?: TextFieldPropWidth;
    onFocus?: React.FocusEventHandler<HTMLElement>;
    onBlur?: React.FocusEventHandler<HTMLElement>;
    autoFocus?: boolean;
    placeholder?: string;
    leftSide?: string | IconComponent;
    rightSide?: string | IconComponent;
    autoComplete?: AutoCompete;
    max?: number | string;
    min?: number | string;
    readOnly?: boolean;
    required?: boolean;
    step?: number | string;
    tabIndex?: number;
    inputRef?: React.Ref<HTMLTextAreaElement | HTMLInputElement>;
    ariaLabel?: string;
    iconSize?: IconPropSize;
    children?: never;
};
export declare const useTextFieldEventsHandler: <P extends {
    className?: string | undefined;
    value?: TextFieldPropValue | undefined;
    cols?: number | undefined;
    onChange?: TextFieldPropOnChange | undefined;
    id?: TextFieldPropId | undefined;
    name?: string | undefined;
    type?: string | undefined;
    disabled?: boolean | undefined;
    maxLength?: number | undefined;
    size?: "m" | "s" | "xs" | "l" | undefined;
    view?: "default" | "clear" | undefined;
    form?: "default" | "round" | "defaultClear" | "defaultBrick" | "brick" | "brickDefault" | "brickClear" | "brickRound" | "roundClear" | "roundBrick" | "clearRound" | "clearDefault" | "clearBrick" | "clearClear" | undefined;
    state?: "alert" | "warning" | "success" | undefined;
    status?: "alert" | "warning" | "success" | undefined;
    width?: "default" | "full" | undefined;
    onFocus?: React.FocusEventHandler<HTMLElement> | undefined;
    onBlur?: React.FocusEventHandler<HTMLElement> | undefined;
    incrementButtons?: boolean | undefined;
    autoFocus?: boolean | undefined;
    placeholder?: string | undefined;
    leftSide?: string | IconComponent | undefined;
    rightSide?: string | IconComponent | undefined;
    withClearButton?: boolean | undefined;
    autoComplete?: AutoCompete | undefined;
    max?: string | number | undefined;
    min?: string | number | undefined;
    readOnly?: boolean | undefined;
    required?: boolean | undefined;
    step?: string | number | number[] | undefined;
    tabIndex?: number | undefined;
    inputContainerRef?: React.Ref<HTMLDivElement> | undefined;
    inputRef?: React.Ref<HTMLInputElement | HTMLTextAreaElement> | undefined;
    ariaLabel?: string | undefined;
    iconSize?: "m" | "s" | "xs" | "l" | undefined;
    children?: undefined;
    label?: string | undefined;
    labelIcon?: IconComponent | undefined;
    caption?: string | undefined;
    labelPosition?: "left" | "top" | undefined;
    focused?: boolean | undefined;
    onKeyDownCapture?: React.KeyboardEventHandler<Element> | undefined;
    onKeyPress?: React.KeyboardEventHandler<Element> | undefined;
    onKeyPressCapture?: React.KeyboardEventHandler<Element> | undefined;
    onKeyUp?: React.KeyboardEventHandler<Element> | undefined;
    onKeyUpCapture?: React.KeyboardEventHandler<Element> | undefined;
    onKeyDown?: React.KeyboardEventHandler<Element> | undefined;
} & Omit<React.HTMLAttributes<HTMLDivElement>, "css" | "className" | "id" | "placeholder" | "tabIndex" | "children" | "onFocus" | "onBlur" | "onChange" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "size" | "caption" | "form" | "label" | "view" | "status" | "step" | "max" | "min" | "name" | "type" | "width" | "autoFocus" | "disabled" | "value" | "autoComplete" | "maxLength" | "readOnly" | "required" | "cols" | "inputRef" | "state" | "focused" | "ariaLabel" | "labelIcon" | "labelPosition" | "incrementButtons" | "leftSide" | "rightSide" | "withClearButton" | "inputContainerRef" | "iconSize"> & {
    rows?: undefined;
    minRows?: undefined;
    maxRows?: undefined;
} & {
    rightSide?: string | IconComponent | undefined;
} & React.RefAttributes<HTMLElement>>(props: P, handler: EventInterceptorHandler, ref: React.RefObject<HTMLDivElement>) => P;
