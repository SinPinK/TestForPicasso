import { IconComponent, IconPropSize } from '@consta/icons/Icon';
import React from 'react';
import { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';
export declare type TabDimensions = {
    size: number;
    gap: number;
};
export declare type TabsItemDefault = {
    label: string | number;
    leftIcon?: IconComponent;
    rightIcon?: IconComponent;
    rightSide?: React.ReactNode;
    leftSide?: React.ReactNode;
    disabled?: boolean;
    /**
     * @deprecated since version 4.11.0 use leftIcon
     */
    icon?: IconComponent;
};
export declare const tabsSizes: readonly ["m", "s", "xs"];
export declare type TabsPropSize = typeof tabsSizes[number];
export declare const tabsDefaultSize: TabsPropSize;
export declare const tabsViews: readonly ["bordered", "clear"];
export declare type TabsPropView = typeof tabsViews[number];
export declare const tabsDefaultView: TabsPropView;
export declare const tabsLinePositions: readonly ["bottom", "top", "left", "right"];
export declare type TabsPropLinePosition = typeof tabsLinePositions[number];
export declare const tabsDefaultLinePosition: TabsPropLinePosition;
export declare const tabsFitModes: readonly ["scroll", "dropdown"];
export declare type TabsPropFitMode = typeof tabsFitModes[number];
export declare const tabsDefaultFitMode: TabsPropFitMode;
export declare type TabsPropGetItemLabel<ITEM> = (item: ITEM) => string | number;
export declare type TabsPropGetItemChecked<ITEM> = (item: ITEM) => boolean | undefined;
export declare type TabsPropGetItemIcon<ITEM> = (item: ITEM) => IconComponent | undefined;
export declare type TabsPropGetItemSide<ITEM> = (item: ITEM) => React.ReactNode | undefined;
export declare type TabsPropGetItemDisabled<ITEM> = (item: ITEM) => boolean | undefined;
export declare type TabsPropOnChange<ITEM> = (props: {
    e: React.MouseEvent;
    value: ITEM;
}) => void;
export declare type RenderItemProps<ITEM> = {
    item: ITEM;
    onChange: React.MouseEventHandler;
    checked: boolean;
    size: TabsPropSize;
    iconSize?: IconPropSize;
    onlyIcon?: boolean;
    label: string;
    renderInDropdown?: boolean;
} & Omit<TabsItemDefault, 'label'>;
export declare type RenderItem<ITEM> = (props: RenderItemProps<ITEM>) => React.ReactElement | null;
export declare type TabsFitModeWrapperProps<ITEM> = {
    items: ITEM[];
    tabsDimensions: TabDimensions[];
    getItemLabel: TabsPropGetItemLabel<ITEM>;
    getItemChecked: TabsPropGetItemChecked<ITEM>;
    renderItem: (item: ITEM) => React.ReactNode;
    renderItemsList: RenderItemsListProp;
    tabRefs: Array<React.RefObject<HTMLElement>>;
    size: TabsPropSize;
};
export declare type TabsProps<ITEM = TabsItemDefault> = PropsWithHTMLAttributesAndRef<{
    size?: TabsPropSize;
    onlyIcon?: boolean;
    view?: TabsPropView;
    iconSize?: IconPropSize;
    items: ITEM[];
    value?: ITEM | null;
    getItemLabel?: TabsPropGetItemLabel<ITEM>;
    getItemLeftIcon?: TabsPropGetItemIcon<ITEM>;
    getItemRightIcon?: TabsPropGetItemIcon<ITEM>;
    getItemLeftSide?: TabsPropGetItemSide<ITEM>;
    getItemRightSide?: TabsPropGetItemSide<ITEM>;
    getItemDisabled?: TabsPropGetItemDisabled<ITEM>;
    children?: never;
    onChange: TabsPropOnChange<ITEM>;
    renderItem?: RenderItem<ITEM>;
    disabled?: boolean;
    /**
     * @deprecated since version 4.11.0 use getItemLeftIcon
     */
    getItemIcon?: TabsPropGetItemIcon<ITEM>;
} & ({
    linePosition?: Extract<TabsPropLinePosition, 'bottom' | 'top'>;
    fitMode?: 'dropdown' | 'scroll';
} | {
    linePosition: Extract<TabsPropLinePosition, 'left' | 'right'>;
    fitMode?: never;
}), HTMLDivElement> & (ITEM extends {
    label: TabsItemDefault['label'];
} ? {} : {
    getItemLabel: TabsPropGetItemLabel<ITEM>;
});
export declare type TabsComponent = <ITEM>(props: TabsProps<ITEM>) => React.ReactElement | null;
export declare type TabsTabProps = {
    onChange: React.MouseEventHandler;
    checked: boolean;
    size: TabsPropSize;
    iconSize?: IconPropSize;
    onlyIcon?: boolean;
    className?: string;
    label: string;
    renderInDropdown?: boolean;
} & Omit<TabsItemDefault, 'label'>;
export declare type TabsMoreItemsProps<ITEM = TabsItemDefault> = PropsWithHTMLAttributesAndRef<{
    items: ITEM[];
    renderItem: (item: ITEM, onClick: () => void, renderInDropdown?: boolean) => React.ReactNode;
    getItemLabel: TabsPropGetItemLabel<ITEM>;
    getItemChecked: TabsPropGetItemChecked<ITEM>;
    height: number;
    size: TabsPropSize;
} & React.RefAttributes<HTMLDivElement>, HTMLDivElement>;
export declare type TabsMoreItemsComponent = <ITEM>(props: TabsMoreItemsProps<ITEM>) => React.ReactElement | null;
export declare type RenderItemsListProp = (props: {
    withRunningLine?: boolean;
    getTabClassName?: (idx: number) => string | undefined;
}) => React.ReactNode;
export declare type TabsDirection = 'horizontal' | 'vertical';
