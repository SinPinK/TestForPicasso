{"version":3,"file":"types.js","names":["tabsSizes","tabsDefaultSize","tabsViews","tabsDefaultView","tabsLinePositions","tabsDefaultLinePosition","tabsFitModes","tabsDefaultFitMode"],"sources":["../../../../../src/components/Tabs/types.ts"],"sourcesContent":["import { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport React from 'react';\n\nimport { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';\n\nexport type TabDimensions = {\n  size: number;\n  gap: number;\n};\n\nexport type TabsItemDefault = {\n  label: string | number;\n  leftIcon?: IconComponent;\n  rightIcon?: IconComponent;\n  rightSide?: React.ReactNode;\n  leftSide?: React.ReactNode;\n  disabled?: boolean;\n\n  /**\n   * @deprecated since version 4.11.0 use leftIcon\n   */\n  icon?: IconComponent;\n};\n\nexport const tabsSizes = ['m', 's', 'xs'] as const;\nexport type TabsPropSize = typeof tabsSizes[number];\nexport const tabsDefaultSize: TabsPropSize = tabsSizes[0];\n\nexport const tabsViews = ['bordered', 'clear'] as const;\nexport type TabsPropView = typeof tabsViews[number];\nexport const tabsDefaultView: TabsPropView = tabsViews[0];\n\nexport const tabsLinePositions = ['bottom', 'top', 'left', 'right'] as const;\nexport type TabsPropLinePosition = typeof tabsLinePositions[number];\nexport const tabsDefaultLinePosition: TabsPropLinePosition = 'bottom';\n\nexport const tabsFitModes = ['scroll', 'dropdown'] as const;\nexport type TabsPropFitMode = typeof tabsFitModes[number];\nexport const tabsDefaultFitMode: TabsPropFitMode = 'dropdown';\n\nexport type TabsPropGetItemLabel<ITEM> = (item: ITEM) => string | number;\nexport type TabsPropGetItemChecked<ITEM> = (item: ITEM) => boolean | undefined;\nexport type TabsPropGetItemIcon<ITEM> = (\n  item: ITEM,\n) => IconComponent | undefined;\nexport type TabsPropGetItemSide<ITEM> = (\n  item: ITEM,\n) => React.ReactNode | undefined;\n\nexport type TabsPropGetItemDisabled<ITEM> = (item: ITEM) => boolean | undefined;\n\nexport type TabsPropOnChange<ITEM> = (props: {\n  e: React.MouseEvent;\n  value: ITEM;\n}) => void;\n\nexport type RenderItemProps<ITEM> = {\n  item: ITEM;\n  onChange: React.MouseEventHandler;\n  checked: boolean;\n  size: TabsPropSize;\n  iconSize?: IconPropSize;\n  onlyIcon?: boolean;\n  label: string;\n  renderInDropdown?: boolean;\n} & Omit<TabsItemDefault, 'label'>;\n\nexport type RenderItem<ITEM> = (\n  props: RenderItemProps<ITEM>,\n) => React.ReactElement | null;\n\nexport type TabsFitModeWrapperProps<ITEM> = {\n  items: ITEM[];\n  tabsDimensions: TabDimensions[];\n  getItemLabel: TabsPropGetItemLabel<ITEM>;\n  getItemChecked: TabsPropGetItemChecked<ITEM>;\n  renderItem: (item: ITEM) => React.ReactNode;\n  renderItemsList: RenderItemsListProp;\n  tabRefs: Array<React.RefObject<HTMLElement>>;\n  size: TabsPropSize;\n};\n\nexport type TabsProps<ITEM = TabsItemDefault> = PropsWithHTMLAttributesAndRef<\n  {\n    size?: TabsPropSize;\n    onlyIcon?: boolean;\n    view?: TabsPropView;\n    iconSize?: IconPropSize;\n    items: ITEM[];\n    value?: ITEM | null;\n    getItemLabel?: TabsPropGetItemLabel<ITEM>;\n    getItemLeftIcon?: TabsPropGetItemIcon<ITEM>;\n    getItemRightIcon?: TabsPropGetItemIcon<ITEM>;\n    getItemLeftSide?: TabsPropGetItemSide<ITEM>;\n    getItemRightSide?: TabsPropGetItemSide<ITEM>;\n    getItemDisabled?: TabsPropGetItemDisabled<ITEM>;\n    children?: never;\n    onChange: TabsPropOnChange<ITEM>;\n    renderItem?: RenderItem<ITEM>;\n    disabled?: boolean;\n\n    /**\n     * @deprecated since version 4.11.0 use getItemLeftIcon\n     */\n    getItemIcon?: TabsPropGetItemIcon<ITEM>;\n  } & (\n    | {\n        linePosition?: Extract<TabsPropLinePosition, 'bottom' | 'top'>;\n        fitMode?: 'dropdown' | 'scroll';\n      }\n    | {\n        linePosition: Extract<TabsPropLinePosition, 'left' | 'right'>;\n        fitMode?: never;\n      }\n  ),\n  HTMLDivElement\n> &\n  (ITEM extends { label: TabsItemDefault['label'] }\n    ? {}\n    : {\n        getItemLabel: TabsPropGetItemLabel<ITEM>;\n      });\n\nexport type TabsComponent = <ITEM>(\n  props: TabsProps<ITEM>,\n) => React.ReactElement | null;\n\nexport type TabsTabProps = {\n  onChange: React.MouseEventHandler;\n  checked: boolean;\n  size: TabsPropSize;\n  iconSize?: IconPropSize;\n  onlyIcon?: boolean;\n  className?: string;\n  label: string;\n  renderInDropdown?: boolean;\n} & Omit<TabsItemDefault, 'label'>;\n\nexport type TabsMoreItemsProps<ITEM = TabsItemDefault> =\n  PropsWithHTMLAttributesAndRef<\n    {\n      items: ITEM[];\n      renderItem: (\n        item: ITEM,\n        onClick: () => void,\n        renderInDropdown?: boolean,\n      ) => React.ReactNode;\n      getItemLabel: TabsPropGetItemLabel<ITEM>;\n      getItemChecked: TabsPropGetItemChecked<ITEM>;\n      height: number;\n      size: TabsPropSize;\n    } & React.RefAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >;\n\nexport type TabsMoreItemsComponent = <ITEM>(\n  props: TabsMoreItemsProps<ITEM>,\n) => React.ReactElement | null;\n\nexport type RenderItemsListProp = (props: {\n  withRunningLine?: boolean;\n  getTabClassName?: (idx: number) => string | undefined;\n}) => React.ReactNode;\n\nexport type TabsDirection = 'horizontal' | 'vertical';\n"],"mappings":"AAwBA,MAAO,IAAMA,UAAS,CAAG,CAAC,GAAD,CAAM,GAAN,CAAW,IAAX,CAAlB,CAEP,MAAO,IAAMC,gBAA6B,CAAGD,SAAS,CAAC,CAAD,CAA/C,CAEP,MAAO,IAAME,UAAS,CAAG,CAAC,UAAD,CAAa,OAAb,CAAlB,CAEP,MAAO,IAAMC,gBAA6B,CAAGD,SAAS,CAAC,CAAD,CAA/C,CAEP,MAAO,IAAME,kBAAiB,CAAG,CAAC,QAAD,CAAW,KAAX,CAAkB,MAAlB,CAA0B,OAA1B,CAA1B,CAEP,MAAO,IAAMC,wBAA6C,CAAG,QAAtD,CAEP,MAAO,IAAMC,aAAY,CAAG,CAAC,QAAD,CAAW,UAAX,CAArB,CAEP,MAAO,IAAMC,mBAAmC,CAAG,UAA5C"}