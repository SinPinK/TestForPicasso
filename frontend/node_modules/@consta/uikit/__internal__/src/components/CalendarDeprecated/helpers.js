import _slicedToArray from"@babel/runtime/helpers/slicedToArray";import{addDays,differenceInDays,endOfMonth,endOfWeek,format,isBefore,isSameDay,isWithinInterval,startOfDay,startOfMonth,startOfWeek}from"date-fns";import eachDayOfInterval from"date-fns/eachDayOfInterval";import{useEffect,useMemo,useState}from"react";import{range}from"../../utils/array";import{isDateRange,isOnlyOneDateInRange}from"../../utils/date";import{isDefined}from"../../utils/type-guards";export var calendarPropView=["oneMonth","twoMonths","slider"];export var calendarPropViewDefault=calendarPropView[0];export var calendarPropType=["date","date-range"];export var calendarPropTypeDefault=calendarPropType[0];var isEqualDate=function(a,b){return a.getTime()===b.getTime()},isEqualDay=function(a,b){return isEqualDate(startOfDay(a),startOfDay(b))};export var dateComparer=function(c,a){var b,d;return(null!==(b=null===c||void 0===c?void 0:c.getTime())&&void 0!==b?b:0)-(null!==(d=null===a||void 0===a?void 0:a.getTime())&&void 0!==d?d:0)};export var getStartAndEndDate=function(a,b){return[a,b].sort(dateComparer)};export var isDateSelected=function(a){var b=a.date,c=a.value;return!!c&&isSameDay(c,b)};export var isValueSelected=function(a){var b=a.date,c=a.value;if(isDateRange(c)){if(c[0]&&c[1]){var d=getStartAndEndDate(c[0],c[1]),e=_slicedToArray(d,2),f=e[0],g=e[1];return isWithinInterval(b,{start:f,end:g})}return isDateSelected({date:b,value:c[0]||c[1]})}return isDateSelected({date:b,value:c})};export var isValueSelectedBackwards=function(a){var b=a.value,c=a.hoveredDate;return c&&isDateRange(b)&&isOnlyOneDateInRange(b)&&(isDefined(b[0])&&isBefore(c,b[0])||isDefined(b[1])&&isBefore(c,b[1]))};var isSelected=function(a){var b=a.date,c=a.value;return!!c&&(Array.isArray(c)?!!c.find(function(a){return!!a&&isEqualDay(b,a)}):isEqualDay(b,c))},isDateInRange=function(a,b){if(!b[0]||!b[1])return!1;var c=a.getTime(),d=[b[0].getTime(),b[1].getTime()];return c===d[0]?"first":c===d[1]?"last":!!(c>d[0]&&c<d[1])},hasEvent=function(a,b){return!!b.find(function(b){return isEqualDay(b,a)})},isToday=function(a){return isEqualDay(new Date,a)},isWithInIntervalMinMaxDade=function(a,b,c){var d=null===b||void 0===b?void 0:b.getTime(),e=null===c||void 0===c?void 0:c.getTime();if(b&&c&&d&&e)return!!(d<e)&&isWithinInterval(a,{start:b,end:c});var f=a.getTime();return d&&!e?d<f:d||!e||e>f};export var getDaysOfMonth=function(a){var b=a.date,c=a.locale,d=a.handleDayClick,e=a.value,f=a.events,g=a.minDate,h=a.maxDate,i=b.getMonth(),j=startOfWeek(startOfMonth(b),{locale:c}),k=endOfWeek(endOfMonth(b),{locale:c}),l=differenceInDays(k,j)+1;return range(l).map(function(a){var b=addDays(j,a),c=format(b,"d");return b.getMonth()===i?{number:c,onClick:d?function(a){return d({e:a,value:b})}:void 0,selected:isSelected({date:b,value:e}),range:Array.isArray(e)&&isDateInRange(b,e),event:f&&hasEvent(b,f),today:isToday(b),disabled:!isWithInIntervalMinMaxDade(b,g,h)}:{number:c,disabled:!0}})};var isDateRangeParams=function(a){return a.type===calendarPropType[1]},isNotDateRangeParams=function(a){return a.type===calendarPropType[0]};export function getHandleSelectDate(a){if(isDateRangeParams(a)){var b=a.value||[void 0,void 0];return function(c){var d=c.value,f=c.e;if(!(a.minDate&&a.maxDate&&!isWithinInterval(d,{start:a.minDate,end:a.maxDate}))){if(!isOnlyOneDateInRange(b)&&"function"==typeof a.onChange)return a.onChange({e:f,value:[d,void 0]});var e=_slicedToArray(b,2),g=e[0],h=e[1];return isDefined(g)&&isEqualDay(g,d)||isDefined(h)&&isEqualDay(h,d)?void 0:isDefined(g)&&"function"==typeof a.onChange?a.onChange({e:f,value:g>d?[d,g]:[g,d]}):isDefined(h)&&"function"==typeof a.onChange?a.onChange({e:f,value:h>d?[d,h]:[h,d]}):void 0}}}return isNotDateRangeParams(a)?function(b){return isWithInIntervalMinMaxDade(b.value,a.minDate,a.maxDate)?"function"==typeof a.onChange?a.onChange(b):void 0:void 0}:function(){}}export var getMonthTitle=function(a,b){return format(a,"LLLL",{locale:b})};export var getMouthLabelWithYear=function(a,b){return"".concat(getMonthTitle(a,b)," ").concat(a.getFullYear())};export var getDaysOfWeek=function(a){var b=new Date;return eachDayOfInterval({start:startOfWeek(b,{locale:a}),end:endOfWeek(b,{locale:a})}).map(function(b){return format(b,"EEEEEE",{locale:a})})};var getCurrentVisibleDate=function(a){var b=a.currentVisibleDate,c=a.minDate,d=a.maxDate,e=a.value,f=new Date;if(b)return b;if(Array.isArray(e)&&e[0])return e[0];if(Array.isArray(e)&&e[1])return e[1];if(e&&!Array.isArray(e))return e;if(c&&d&&!isDateInRange(f,[c,d]))return c;if(c&&!d){var g=c.getTime(),h=f.getTime();if(h<g)return c}if(!c&&d){var i=d.getTime(),j=f.getTime();if(j>i)return d}return f};export var useCurrentVisibleDate=function(a){var b,c,d,e=useMemo(function(){return startOfMonth(getCurrentVisibleDate(a))},[(null===(b=a.currentVisibleDate)||void 0===b?void 0:b.getTime())||0,(null===(c=a.minDate)||void 0===c?void 0:c.getTime())||0,(null===(d=a.maxDate)||void 0===d?void 0:d.getTime())||0]),f=useState(e);return useEffect(function(){return f[1](e)},[e.getTime()]),f};
//# sourceMappingURL=helpers.js.map