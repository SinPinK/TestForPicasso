/// <reference types="react" />
import { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';
export declare type CheckboxGroupDefaultItem = {
    label: string;
    disabled?: boolean;
};
export declare const checkboxGroupDirections: readonly ["column", "row"];
export declare type CheckboxGroupDirection = typeof checkboxGroupDirections[number];
export declare const checkboxGroupDefaultDirection: CheckboxGroupDirection;
export declare const checkboxGroupSizes: readonly ["m", "xs", "s", "l"];
export declare type CheckboxGroupPropSize = typeof checkboxGroupSizes[number];
export declare const checkboxGroupDefaultSize: CheckboxGroupPropSize;
export declare const checkboxGroupViews: readonly ["primary", "ghost"];
export declare type CheckboxGroupPropView = typeof checkboxGroupViews[number];
export declare const checkboxGroupDefaultView: CheckboxGroupPropView;
export declare type CheckboxGroupPropGetItemLabel<ITEM> = (item: ITEM) => string;
export declare type CheckboxGroupPropGetItemDisabled<ITEM> = (item: ITEM) => boolean | undefined;
export declare type CheckboxGroupProps<ITEM = CheckboxGroupDefaultItem> = PropsWithHTMLAttributesAndRef<{
    value?: ITEM[] | null;
    items: ITEM[];
    getItemLabel?: CheckboxGroupPropGetItemLabel<ITEM>;
    getItemDisabled?: CheckboxGroupPropGetItemDisabled<ITEM>;
    onChange: (props: {
        e: React.ChangeEvent<HTMLInputElement>;
        value: ITEM[] | null;
    }) => void;
    name?: string;
    direction?: CheckboxGroupDirection;
    size?: CheckboxGroupPropSize;
    view?: CheckboxGroupPropView;
    disabled?: boolean;
    className?: string;
}, HTMLDivElement> & (ITEM extends {
    label: CheckboxGroupDefaultItem['label'];
} ? {} : {
    getItemLabel: CheckboxGroupPropGetItemLabel<ITEM>;
});
export declare type CheckboxGroupComponent = <ITEM = CheckboxGroupDefaultItem>(props: CheckboxGroupProps<ITEM>) => React.ReactElement | null;
