import { IconComponent } from '@consta/icons/Icon';
import React from 'react';
import { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';
export declare const propSize: readonly ["s", "xs", "m"];
export declare type PropSize = typeof propSize[number];
export declare const propSizeDefault: "s";
export declare const propDirection: readonly ["horizontal", "vertical"];
export declare type PropDirection = typeof propDirection[number];
export declare const propDirectionDefault: "horizontal";
export declare const propStatus: readonly ["normal", "success", "warning", "alert"];
export declare type PropStatus = typeof propStatus[number];
export declare const propStatusDefault: "normal";
export declare const pointNumbersMap: readonly [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
export declare type PointNumbersMap = typeof pointNumbersMap[number];
export declare const propPosition: readonly ["center", "start", "end"];
export declare type PropPosition = typeof propPosition[number];
export declare const propPositionDefault: PropPosition;
export declare type PropGetItemLabel<ITEM> = (item: ITEM) => string | undefined;
export declare type PropGetItemKey<ITEM> = (item: ITEM) => string | number;
export declare type PropGetItemTooltipContent<ITEM> = (item: ITEM) => string | undefined;
export declare type PropGetItemLineStatus<ITEM> = (item: ITEM) => PropStatus | undefined;
export declare type PropGetItemPoint<ITEM> = (item: ITEM) => PointNumbersMap | IconComponent | undefined;
export declare type PropGetItemProgress<ITEM> = (item: ITEM) => boolean | undefined;
export declare type PropGetItemContent<ITEM> = (item: ITEM) => React.ReactNode | undefined;
export declare type PropGetItemStatus<ITEM> = (item: ITEM) => PropStatus | undefined;
export declare type PropGetItemOnClick<ITEM> = (item: ITEM) => React.EventHandler<React.MouseEvent> | undefined;
export declare type DefaultItem = {
    label?: string;
    tooltipContent?: string;
    lineStatus?: PropStatus;
    point?: PointNumbersMap | IconComponent;
    status?: PropStatus;
    progress?: boolean;
    content?: React.ReactNode;
    onClick?: React.EventHandler<React.MouseEvent>;
};
export declare type Line = {
    status: PropStatus;
    size: number;
};
export declare type ProgressStepBarProps<ITEM = DefaultItem> = PropsWithHTMLAttributesAndRef<{
    steps: ITEM[];
    direction?: PropDirection;
    size?: PropSize;
    activeStepIndex?: number;
    onItemClick?: (props: {
        e: React.MouseEvent;
        item: ITEM;
        index: number;
    }) => void;
    getItemLabel?: PropGetItemLabel<ITEM>;
    getItemLineStatus?: PropGetItemLineStatus<ITEM>;
    getItemTooltipContent?: PropGetItemTooltipContent<ITEM>;
    getItemPoint?: PropGetItemPoint<ITEM>;
    getItemProgress?: PropGetItemProgress<ITEM>;
    getItemContent?: PropGetItemContent<ITEM>;
    getItemStatus?: PropGetItemStatus<ITEM>;
    getItemOnClick?: PropGetItemOnClick<ITEM>;
}, HTMLDivElement> & (ITEM extends {
    label: DefaultItem['label'];
} ? {} : {
    getItemLabel: PropGetItemLabel<ITEM>;
});
export declare type ProgressStepBarItemProps = {
    content?: React.ReactNode;
    label?: string;
    point?: PointNumbersMap | IconComponent;
    progress?: boolean;
    status?: PropStatus | 'system';
    tooltipContent?: string;
    tooltipZIndex?: number;
    position?: PropPosition;
    direction: PropDirection;
    size: PropSize;
    onClick?: (e: React.MouseEvent) => void;
    pointRef?: React.RefObject<HTMLButtonElement>;
    className?: string;
};
export declare const cnProgressStepBar: import("@bem-react/classname").ClassNameFormatter;
export declare const defaultGetItemLabel: PropGetItemLabel<DefaultItem>;
export declare const defaultGetItemTooltipContent: PropGetItemTooltipContent<DefaultItem>;
export declare const defaultGetItemPoint: PropGetItemPoint<DefaultItem>;
export declare const defaultGetItemLineStatus: PropGetItemLineStatus<DefaultItem>;
export declare const defaultGetItemProgress: PropGetItemProgress<DefaultItem>;
export declare const defaultGetItemContent: PropGetItemContent<DefaultItem>;
export declare const defaultGetItemStatus: PropGetItemStatus<DefaultItem>;
export declare const defaultGetItemOnClick: PropGetItemOnClick<DefaultItem>;
export declare type ProgressStepBarComponent = <ITEM = DefaultItem>(props: ProgressStepBarProps<ITEM>) => React.ReactElement | null;
export declare type ProgressStepBarItemComponent = (props: PropsWithHTMLAttributesAndRef<ProgressStepBarItemProps, HTMLDivElement>) => React.ReactElement | null;
export declare function withDefaultGetters<ITEM>(props: ProgressStepBarProps<ITEM>): {
    steps: ITEM[];
    direction?: "horizontal" | "vertical" | undefined;
    size?: "m" | "s" | "xs" | undefined;
    activeStepIndex?: number | undefined;
    onItemClick?: ((props: {
        e: React.MouseEvent<Element, MouseEvent>;
        item: ITEM;
        index: number;
    }) => void) | undefined;
    getItemLabel?: PropGetItemLabel<ITEM> | undefined;
    getItemLineStatus?: PropGetItemLineStatus<ITEM> | undefined;
    getItemTooltipContent?: PropGetItemTooltipContent<ITEM> | undefined;
    getItemPoint?: PropGetItemPoint<ITEM> | undefined;
    getItemProgress?: PropGetItemProgress<ITEM> | undefined;
    getItemContent?: PropGetItemContent<ITEM> | undefined;
    getItemStatus?: PropGetItemStatus<ITEM> | undefined;
    getItemOnClick?: PropGetItemOnClick<ITEM> | undefined;
} & Omit<React.HTMLAttributes<HTMLDivElement>, "css" | "size" | "direction" | "getItemLabel" | "getItemStatus" | "onItemClick" | "getItemOnClick" | "getItemContent" | "steps" | "activeStepIndex" | "getItemLineStatus" | "getItemTooltipContent" | "getItemPoint" | "getItemProgress"> & React.RefAttributes<HTMLDivElement> & (ITEM extends {
    label: string | undefined;
} ? {} : {
    getItemLabel: PropGetItemLabel<ITEM>;
}) & {
    getItemLabel: PropGetItemLabel<DefaultItem> | PropGetItemLabel<ITEM>;
    getItemTooltipContent: PropGetItemTooltipContent<DefaultItem> | PropGetItemTooltipContent<ITEM>;
    getItemPoint: PropGetItemPoint<DefaultItem> | PropGetItemPoint<ITEM>;
    getItemProgress: PropGetItemProgress<DefaultItem> | PropGetItemProgress<ITEM>;
    getItemContent: PropGetItemContent<DefaultItem> | PropGetItemContent<ITEM>;
    getItemStatus: PropGetItemStatus<DefaultItem> | PropGetItemStatus<ITEM>;
    getItemLineStatus: PropGetItemLineStatus<DefaultItem> | PropGetItemLineStatus<ITEM>;
    getItemOnClick: PropGetItemOnClick<DefaultItem> | PropGetItemOnClick<ITEM>;
};
export declare const getItemPosition: (index: number, lendth: number) => "end" | "start" | "center";
export declare const getLineSize: (container: React.RefObject<HTMLElement>, activeElement: React.RefObject<HTMLElement>, direction: PropDirection) => number;
export declare const calculateLines: (refs: React.RefObject<HTMLElement>[], direction: PropDirection) => number[];
