{"version":3,"file":"helpers.js","names":["format","isValid","isWithinInterval","parse","IMask","useCallback","useEffect","useMemo","useState","useIMask","useMutableRef","datePickerPropFormatTypeYear","getPartsDate","datePickerErrorTypes","usePicker","props","value","onChange","onError","formatProp","separator","maxDate","minDate","onChangeRef","valueRef","onErrorRef","stringValue","setStringValue","stringValueRef","handleChange","e","current","yyyy","date","Date","start","end","type","getTime","options","mask","pattern","blocks","MaskedRange","from","to","lazy","autofix","string","validate","_val","params","maskOptions","inputRef","length","clearValue"],"sources":["../../../../../../src/components/DatePicker/DatePickerFieldTypeYear/helpers.ts"],"sourcesContent":["import { IconComponent, IconPropSize } from '@consta/icons/Icon';\nimport { format, isValid, isWithinInterval, parse } from 'date-fns';\nimport IMask from 'imask';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { useIMask } from '##/components/TextField';\nimport { useMutableRef } from '##/hooks/useMutableRef';\n\nimport { PropsWithHTMLAttributes } from '../../../utils/types/PropsWithHTMLAttributes';\nimport {\n  TextFieldPropForm,\n  TextFieldPropSize,\n  TextFieldPropStatus,\n  TextFieldPropView,\n  TextFieldPropWidth,\n} from '../../TextField/TextField';\nimport { datePickerPropFormatTypeYear, getPartsDate } from '../helpers';\nimport { datePickerErrorTypes, DatePickerPropOnError } from '../types';\n\ntype DatePickerFieldTypeYearPropOnChange = (props: {\n  e: Event;\n  value: Date | null;\n}) => void;\n\nexport type DatePickerFieldTypeYearProps = PropsWithHTMLAttributes<\n  {\n    className?: string;\n    value?: Date | null;\n    onChange?: DatePickerFieldTypeYearPropOnChange;\n    onError?: DatePickerPropOnError;\n    id?: string;\n    name?: string;\n    disabled?: boolean;\n    size?: TextFieldPropSize;\n    view?: TextFieldPropView;\n    form?: TextFieldPropForm;\n    status?: TextFieldPropStatus;\n    width?: TextFieldPropWidth;\n    onFocus?: React.FocusEventHandler<HTMLElement>;\n    onBlur?: React.FocusEventHandler<HTMLElement>;\n    autoFocus?: boolean;\n    placeholder?: string;\n    leftSide?: string | IconComponent;\n    rightSide?: string | IconComponent;\n    readOnly?: boolean;\n    required?: boolean;\n    tabIndex?: number;\n    inputRef?: React.Ref<HTMLTextAreaElement | HTMLInputElement>;\n    ariaLabel?: string;\n    iconSize?: IconPropSize;\n    children?: never;\n    format?: string;\n    separator?: string;\n    minDate?: Date;\n    maxDate?: Date;\n    focused?: boolean;\n    label?: string;\n    labelIcon?: IconComponent;\n    caption?: string;\n    labelPosition?: 'top' | 'left';\n    withClearButton?: boolean;\n  },\n  HTMLDivElement\n>;\n\ntype UsePickerProps = {\n  value?: Date | null;\n  onChange?: DatePickerFieldTypeYearPropOnChange;\n  onError?: DatePickerPropOnError;\n  format: string;\n  separator: string;\n  minDate: Date;\n  maxDate: Date;\n};\n\nexport const usePicker = (props: UsePickerProps) => {\n  const {\n    value,\n    onChange,\n    onError,\n    format: formatProp,\n    separator,\n    maxDate,\n    minDate,\n  } = props;\n  const onChangeRef = useMutableRef(onChange);\n  const valueRef = useMutableRef(value);\n  const onErrorRef = useMutableRef(onError);\n\n  const [stringValue, setStringValue] = useState<string | null>(\n    value && isValid(value) ? format(value, formatProp) : null,\n  );\n  const stringValueRef = useMutableRef(stringValue);\n\n  const handleChange = useCallback(\n    ({ e, value: stringValue }: { e: Event; value: string | null }) => {\n      if (stringValueRef.current === stringValue) {\n        return;\n      }\n\n      setStringValue(stringValue);\n\n      const onChange = onChangeRef.current;\n      const value = valueRef.current;\n\n      if (onChange) {\n        if (!stringValue) {\n          if (value) {\n            onChange({ e, value: null });\n          }\n          return;\n        }\n\n        const [yyyy] = getPartsDate(stringValue, formatProp, separator, false, [\n          'yyyy',\n        ]);\n\n        if (yyyy) {\n          const date = parse(\n            `${yyyy}`,\n            datePickerPropFormatTypeYear,\n            new Date(),\n          );\n          if (!isWithinInterval(date, { start: minDate, end: maxDate })) {\n            onErrorRef.current?.({\n              type: datePickerErrorTypes[0],\n              stringValue,\n              yyyy,\n              date,\n            });\n\n            if (value) {\n              onChange({ e, value: null });\n            }\n            return;\n          }\n          onChange({ e, value: date });\n        } else if (value) {\n          onChange({ e, value: null });\n        }\n      }\n    },\n    [minDate?.getTime(), maxDate?.getTime(), formatProp, separator],\n  );\n\n  const options: IMask.InputMask<IMask.MaskedDateOptions> = useMemo(\n    () =>\n      ({\n        mask: Date,\n        pattern: formatProp,\n        blocks: {\n          yyyy: {\n            mask: IMask.MaskedRange,\n            from: 1,\n            to: 9999,\n          },\n        },\n        lazy: true,\n        autofix: true,\n        format: (date: Date) => format(date, formatProp),\n        parse: (string: string) => parse(string, formatProp, new Date()),\n        validate: (string: string) => {\n          const [yyyy] = getPartsDate(string, formatProp, separator, false, [\n            'yyyy',\n          ]);\n\n          if (\n            yyyy &&\n            !isValid(parse(`${yyyy}`, datePickerPropFormatTypeYear, new Date()))\n          ) {\n            onError &&\n              onError({\n                type: datePickerErrorTypes[1],\n                stringValue: string,\n                yyyy,\n              });\n\n            return false;\n          }\n\n          return true;\n        },\n        // проблема в типах IMask\n      } as unknown as IMask.InputMask<IMask.MaskedDateOptions>),\n    [formatProp, separator],\n  );\n\n  const { inputRef } = useIMask({\n    value: stringValue,\n    onChange: (_val, params) => handleChange?.(params),\n    maskOptions: options,\n  });\n\n  const clearValue = (e: Event) => {\n    setStringValue(null);\n    onChange?.({ e, value: null });\n  };\n\n  // при изменении value, нужно обновить stringValue\n  useEffect(() => {\n    if (value && isValid(value)) {\n      setStringValue(format(value, formatProp));\n    } else if (stringValue?.length === formatProp.length) {\n      // если количество введенных символов меньше чем в формате маски\n      // то не нужно мешать вводу с клавиатуры\n      // если дата была введена полностью и value пришел null,\n      // то можно считать что поле нуждается в очистке\n      setStringValue('');\n    }\n  }, [value?.getTime()]);\n\n  return {\n    stringValue,\n    inputRef,\n    clearValue,\n  };\n};\n"],"mappings":"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"}