{"version":3,"file":"helpers.js","names":["contextMenuSizes","contextMenuDefaultSize","contextMenuAccent","contextMenuPropSubMenuDirections","contextMenuPropDefaultSubMenuDirection"],"sources":["../../../../../src/components/ContextMenuDeprecated/helpers.tsx"],"sourcesContent":["import { ClickOutsideHandler } from '../../hooks/useClickOutside/useClickOutside';\nimport { PropsWithAsAttributes } from '../../utils/types/PropsWithAsAttributes';\nimport { PropsWithHTMLAttributesAndRef } from '../../utils/types/PropsWithHTMLAttributes';\nimport { Direction, PopoverPropOffset, Position } from '../Popover/Popover';\n\nexport const contextMenuSizes = ['m', 's', 'l'] as const;\nexport type ContextMenuPropSize = typeof contextMenuSizes[number];\nexport const contextMenuDefaultSize: ContextMenuPropSize = contextMenuSizes[0];\n\nexport const contextMenuAccent = ['alert', 'warning', 'success'] as const;\nexport type ContextMenuAccent = typeof contextMenuAccent[number];\n\nexport type ContextMenuPropGetLabel<ITEM> = (item: ITEM) => string | number;\nexport type ContextMenuPropGetSide<ITEM> = (\n  item: ITEM,\n) => React.ReactNode | null;\nexport type ContextMenuPropGetSubItems<ITEM> = (\n  item: ITEM,\n) => ITEM[] | undefined;\nexport type ContextMenuPropGetAccent<ITEM> = (\n  item: ITEM,\n) => ContextMenuAccent | undefined;\nexport type ContextMenuPropGetGroupId<ITEM> = (\n  item: ITEM,\n) => string | number | undefined;\nexport type ContextMenuPropGetKey<ITEM> = (item: ITEM) => string | number;\nexport type ContextMenuPropGetDisable<ITEM> = (\n  item: ITEM,\n) => boolean | undefined;\nexport type ContextMenuPropGetGroupLabel = (\n  id: string | number | undefined,\n) => string | number | undefined;\nexport type ContextMenuPropSortGroup = (\n  a: string | number,\n  b: string | number,\n) => number;\nexport type ContextMenuPropGetItemOnClick<ITEM> = (\n  item: ITEM,\n) => React.EventHandler<React.MouseEvent> | undefined;\nexport type ContextMenuPropGetItemAs<ITEM> = (\n  item: ITEM,\n) => keyof JSX.IntrinsicElements;\nexport type ContextMenuPropGetItemHTMLAttributes<ITEM> = (\n  item: ITEM,\n) => JSX.IntrinsicElements[keyof JSX.IntrinsicElements];\n\nexport const contextMenuPropSubMenuDirections = [\n  'rightStartUp',\n  'rightStartDown',\n  'leftStartUp',\n  'leftStartDown',\n] as const;\nexport type ContextMenuPropSubMenuDirection =\n  typeof contextMenuPropSubMenuDirections[number];\nexport const contextMenuPropDefaultSubMenuDirection: ContextMenuPropSubMenuDirection =\n  contextMenuPropSubMenuDirections[0];\n\ntype PositioningProps =\n  | {\n      anchorRef: React.RefObject<HTMLElement>;\n      position?: never;\n    }\n  | {\n      anchorRef?: never;\n      position: Position;\n    };\n\nexport type ContextMenuProps<ITEM> = PropsWithHTMLAttributesAndRef<\n  {\n    items: ITEM[];\n    getLabel: ContextMenuPropGetLabel<ITEM>;\n    getLeftSideBar?: ContextMenuPropGetSide<ITEM>;\n    getRightSideBar?: ContextMenuPropGetSide<ITEM>;\n    getSubItems?: ContextMenuPropGetSubItems<ITEM>;\n    getGroupId?: ContextMenuPropGetGroupId<ITEM>;\n    getGroupLabel?: ContextMenuPropGetGroupLabel;\n    getAccent?: ContextMenuPropGetAccent<ITEM>;\n    size?: ContextMenuPropSize;\n    sortGroup?: ContextMenuPropSortGroup;\n    getOnClick?: ContextMenuPropGetItemOnClick<ITEM>;\n    getItemOnClick?: ContextMenuPropGetItemOnClick<ITEM>;\n    direction?: Direction;\n    possibleDirections?: readonly Direction[];\n    subMenuDirection?: ContextMenuPropSubMenuDirection;\n    getKey?: ContextMenuPropGetKey<ITEM>;\n    getDisabled?: ContextMenuPropGetDisable<ITEM>;\n    offset?: PopoverPropOffset;\n    onItemClick?: (props: { e: React.MouseEvent; item: ITEM }) => void;\n    onClickOutside?: ClickOutsideHandler;\n    spareDirection?: Direction;\n    getItemAs?: ContextMenuPropGetItemAs<ITEM>;\n    getItemHTMLAttributes?: ContextMenuPropGetItemHTMLAttributes<ITEM>;\n    onSetDirection?: (direction: Direction) => void;\n  } & PositioningProps,\n  HTMLDivElement\n>;\n\nexport type AddLevel<ITEM> = (\n  level: number,\n  items: ITEM[],\n  anchorRef: React.RefObject<HTMLElement>,\n  activeItem: string,\n) => void;\n\nexport type DeleteLevel = (level: number) => void;\n\ntype ContextMenuLevelProps<ITEM> = Omit<\n  ContextMenuProps<ITEM> & {\n    level: number;\n    addLevel: AddLevel<ITEM>;\n    deleteLevel: DeleteLevel;\n    activeItem?: string;\n    onSetDirection?: (direction: Direction) => void;\n    hoveredParenLevel: number;\n    setHoveredParenLevel: (level: number) => void;\n  },\n  'subMenuDirection' | 'getKey' | 'onClickOutside' | 'isOpen'\n>;\n\nexport type ContextMenuItemProps<\n  AS extends keyof JSX.IntrinsicElements = 'div',\n> = PropsWithAsAttributes<\n  {\n    label: string | number;\n    rightSide?: React.ReactNode;\n    leftSide?: React.ReactNode;\n    size?: ContextMenuPropSize;\n    active?: boolean;\n    withSubMenu: boolean;\n    accent?: ContextMenuAccent;\n    disabled?: boolean;\n  },\n  AS\n> &\n  React.RefAttributes<HTMLDivElement>;\n\nexport type Level<ITEM> = {\n  items: ITEM[];\n  activeItem?: string;\n  direction?: Direction;\n  possibleDirections?: readonly Direction[];\n  offset?: PopoverPropOffset;\n} & PositioningProps;\n\nexport type ContextMenuItemComponent = <\n  AS extends keyof JSX.IntrinsicElements = 'div',\n>(\n  props: ContextMenuItemProps<AS>,\n  ref: React.Ref<HTMLElement>,\n) => React.ReactElement | null;\n\nexport type ContextMenuComponent = <ITEM>(\n  props: ContextMenuProps<ITEM>,\n) => React.ReactElement | null;\n\nexport type ContextMenuLevelType = <ITEM>(\n  props: ContextMenuLevelProps<ITEM>,\n  ref: React.Ref<HTMLElement>,\n) => React.ReactElement | null;\n"],"mappings":"AAKA,MAAO,IAAMA,iBAAgB,CAAG,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAzB,CAEP,MAAO,IAAMC,uBAA2C,CAAGD,gBAAgB,CAAC,CAAD,CAApE,CAEP,MAAO,IAAME,kBAAiB,CAAG,CAAC,OAAD,CAAU,SAAV,CAAqB,SAArB,CAA1B,CAqCP,MAAO,IAAMC,iCAAgC,CAAG,CAC9C,cAD8C,CAE9C,gBAF8C,CAG9C,aAH8C,CAI9C,eAJ8C,CAAzC,CAQP,MAAO,IAAMC,uCAAuE,CAClFD,gCAAgC,CAAC,CAAD,CAD3B"}