{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isArray from \"lodash/isArray\";\nimport _omit from \"lodash/omit\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _intersection from \"lodash/intersection\";\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { getNodeCheckState } from '../CheckTreePicker/utils';\nimport { TREE_NODE_DROP_POSITION, shallowEqual } from '../utils';\nimport { shouldDisplay } from '../Picker';\nimport reactToString from './reactToString';\nimport { TREE_NODE_PADDING, TREE_NODE_ROOT_PADDING } from './constants';\nimport { attachParent } from './attachParent';\n// gap of tree node\nvar TREE_NODE_GAP = 4;\n/**\n * according node parentNode expand state decide node whether to show\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByParentExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n  return false;\n}\n/**\n * flatten tree structure to array\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n *\n * @deprecated This {@link UNSAFE_flattenTree} function is considered unsafe because it mutates `tree` argument in-place\n *             Use {@link flattenTree} instead.\n */\n\nexport function UNSAFE_flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n  var flattenData = [];\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      flattenData.push(attachParent(node, parent));\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n  traverse(tree, null);\n  return flattenData;\n}\nexport function flattenTree(rootNodes, getChildren) {\n  var result = [];\n  walkTree(rootNodes, getChildren, function (node) {\n    return result.push(node);\n  });\n  return result;\n}\nfunction walkTree(rootNodes, getChildren, callback) {\n  for (var queue = [].concat(rootNodes); queue.length > 0;) {\n    var _node = queue.shift();\n    callback(_node);\n    var children = getChildren(_node);\n    if (children) {\n      queue.push.apply(queue, children);\n    }\n  }\n}\n/**\n * get all ancestor nodes of given node\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n  var parents = [];\n  var traverse = function traverse(node) {\n    if (node !== null && node !== void 0 && node[parentKey]) {\n      traverse(node[parentKey]);\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n  traverse(node);\n  return parents;\n}\n/**\n * get all parentKeys of given node\n * @param nodes\n * @param node\n * @param valueKey\n */\n\nexport function getNodeParentKeys(nodes, node, valueKey) {\n  var parentKeys = [];\n  var traverse = function traverse(node) {\n    var _node$parent;\n    if (node !== null && node !== void 0 && (_node$parent = node.parent) !== null && _node$parent !== void 0 && _node$parent.refKey) {\n      var _node$parent2;\n      traverse(nodes[node.parent.refKey]);\n      parentKeys.push(node === null || node === void 0 ? void 0 : (_node$parent2 = node.parent) === null || _node$parent2 === void 0 ? void 0 : _node$parent2[valueKey]);\n    }\n  };\n  traverse(node);\n  return parentKeys;\n}\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * shallow equal array\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  return _isArray(a) && _isArray(b) && !shallowEqualArray(a, b);\n}\nexport function getDefaultExpandItemValues(data, props) {\n  var valueKey = props.valueKey,\n    defaultExpandAll = props.defaultExpandAll,\n    childrenKey = props.childrenKey,\n    _props$defaultExpandI = props.defaultExpandItemValues,\n    defaultExpandItemValues = _props$defaultExpandI === void 0 ? [] : _props$defaultExpandI;\n  if (defaultExpandAll) {\n    return UNSAFE_flattenTree(data, childrenKey).filter(function (item) {\n      return Array.isArray(item[childrenKey]) && item[childrenKey].length > 0;\n    }).map(function (item) {\n      return item[valueKey];\n    });\n  }\n  return defaultExpandItemValues;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n    defaultExpandItemValues = props.defaultExpandItemValues;\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n  return [];\n}\n/**\n * get dragNode and it's children node keys\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n    top = _treeNodeElement$getB.top,\n    bottom = _treeNodeElement$getB.bottom;\n  var gap = TREE_NODE_GAP; // bottom of node\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // top of node\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n    childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var _item = items[_index];\n      if (shallowEqual(_item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // when children is empty, delete children prop for hidden anchor\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n        break;\n      }\n      if (Array.isArray(_item[childrenKey])) {\n        traverse(_item[childrenKey], _item);\n      }\n    }\n  };\n  traverse(data);\n}\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n    childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n      dropNode = params.dropNode,\n      dropNodePosition = params.dropNodePosition;\n    var cloneDragNode = _extends({}, dragNode);\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var _item2 = items[_index2];\n        if (shallowEqual(_item2[valueKey], dropNode[valueKey])) {\n          // drag to node inside\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            _item2[childrenKey] = _isNil(_item2[childrenKey]) ? [] : _item2[childrenKey];\n            _item2[childrenKey].push(cloneDragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // drag to top of node\n            items.splice(_index2, 0, cloneDragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // drag to bottom of node\n            items.splice(_index2 + 1, 0, cloneDragNode);\n            break;\n          }\n        }\n        if (Array.isArray(_item2[childrenKey]) && _item2[childrenKey].length > 0) {\n          updateTree(_item2[childrenKey]);\n        }\n      }\n    };\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n    for (var i = 0; i < nodes.length; i += 1) {\n      var _item3 = nodes[i];\n      if (_isArray(_item3.children)) {\n        var _node2 = findNode(_item3.children);\n        if (_node2) {\n          return _node2;\n        }\n      }\n      if (check(_item3)) {\n        return _item3;\n      }\n    }\n    return undefined;\n  };\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n    var nextNodes = [];\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n        if (nextChildren.length) {\n          var _item4 = _clone(nodes[i]);\n          _item4.children = nextChildren;\n          nextNodes.push(_item4);\n          continue;\n        }\n      }\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n    return nextNodes;\n  };\n  return findNodes(data);\n}\n/**\n * get all focusable items\n * exclude not visible and disabled node\n * @param filteredData - filtered tree data\n * @param props - TreeProps\n * @param isSearching - component is in Searching\n * @returns\n */\n\nexport var getFocusableItems = function getFocusableItems(filteredData, props, isSearching) {\n  var disabledItemValues = props.disabledItemValues,\n    valueKey = props.valueKey,\n    childrenKey = props.childrenKey,\n    expandItemValues = props.expandItemValues;\n  var items = [];\n  var loop = function loop(nodes) {\n    nodes.forEach(function (node) {\n      var disabled = disabledItemValues.some(function (disabledItem) {\n        return shallowEqual(disabledItem, node[valueKey]);\n      });\n      if (!disabled && node.visible) {\n        items.push(node);\n      } // always expand when searching\n\n      var expand = isSearching ? true : expandItemValues.includes(node[valueKey]);\n      if (node[childrenKey] && expand) {\n        loop(node[childrenKey]);\n      }\n    });\n  };\n  loop(filteredData);\n  return items;\n};\n/**\n * return all focusable Item and active Element index\n * @param focusItemValue\n * @param focusableItems items\n */\n\nexport var getActiveIndex = function getActiveIndex(focusItemValue, focusItems, valueKey) {\n  var activeIndex = -1;\n  focusItems.forEach(function (item, index) {\n    if (shallowEqual(item[valueKey], focusItemValue)) {\n      activeIndex = index;\n    }\n  });\n  return activeIndex;\n};\n/**\n * get current active element and node data\n * @param flattenNodes - flattenData\n */\n\nexport var getActiveItem = function getActiveItem(focusItemValue, flattenNodes, valueKey) {\n  var nodeData = null;\n  var activeNode = Object.values(flattenNodes).find(function (node) {\n    return shallowEqual(node[valueKey], focusItemValue);\n  });\n  if (activeNode) {\n    nodeData = activeNode;\n  }\n  return nodeData;\n};\nexport var getElementByDataKey = function getElementByDataKey(dataKey, treeNodesRefs, selector) {\n  var ele = treeNodesRefs[dataKey];\n  if (ele instanceof Element) {\n    return ele.querySelector(selector);\n  }\n  return null;\n};\n/**\n * focus to specify tree node\n * @param refKey - target node refKey\n * @param treeNodeRefs - all tree node refs object\n * @param selector - node css selector\n */\n\nexport var focusTreeNode = function focusTreeNode(refKey, treeNodeRefs, selector) {\n  var _node$focus;\n  var node = getElementByDataKey(refKey, treeNodeRefs, selector);\n  node === null || node === void 0 ? void 0 : (_node$focus = node.focus) === null || _node$focus === void 0 ? void 0 : _node$focus.call(node);\n};\n\n/**\n * focus next item with keyboard\n * @param param\n */\nexport var focusNextItem = function focusNextItem(_ref3) {\n  var focusItemValue = _ref3.focusItemValue,\n    focusableItems = _ref3.focusableItems,\n    treeNodesRefs = _ref3.treeNodesRefs,\n    selector = _ref3.selector,\n    valueKey = _ref3.valueKey,\n    callback = _ref3.callback;\n  var activeIndex = getActiveIndex(focusItemValue, focusableItems, valueKey);\n  if (focusableItems.length === 0) {\n    return;\n  }\n  var nextIndex = activeIndex === focusableItems.length - 1 ? 0 : activeIndex + 1;\n  var nextFocusItemValue = focusableItems[nextIndex][valueKey];\n  callback === null || callback === void 0 ? void 0 : callback(nextFocusItemValue);\n  focusTreeNode(focusableItems[nextIndex].refKey, treeNodesRefs, selector);\n};\n/**\n * focus prev item with keyboard\n * @param param\n */\n\nexport var focusPreviousItem = function focusPreviousItem(_ref4) {\n  var focusItemValue = _ref4.focusItemValue,\n    focusableItems = _ref4.focusableItems,\n    treeNodesRefs = _ref4.treeNodesRefs,\n    selector = _ref4.selector,\n    valueKey = _ref4.valueKey,\n    callback = _ref4.callback;\n  var activeIndex = getActiveIndex(focusItemValue, focusableItems, valueKey);\n  if (focusableItems.length === 0) {\n    return;\n  }\n  var prevIndex = activeIndex === 0 ? focusableItems.length - 1 : activeIndex - 1;\n  prevIndex = prevIndex >= 0 ? prevIndex : 0;\n  var prevFocusItemValue = focusableItems[prevIndex][valueKey];\n  callback === null || callback === void 0 ? void 0 : callback(prevFocusItemValue);\n  focusTreeNode(focusableItems[prevIndex].refKey, treeNodesRefs, selector);\n};\n\n/**\n * Left arrow keyboard event handler\n * When focus is on an open node, closes the node.\n * When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n * When focus is on a root node that is also either an end node or a closed node, does nothing.\n * @see https://www.w3.org/TR/wai-aria-practices/#TreeView\n */\nexport function leftArrowHandler(_ref5) {\n  var focusItem = _ref5.focusItem,\n    expand = _ref5.expand,\n    onExpand = _ref5.onExpand,\n    onFocusItem = _ref5.onFocusItem;\n  if (_isEmpty(focusItem)) {\n    return;\n  }\n  if (expand) {\n    onExpand(_extends({}, focusItem, {\n      expand: expand\n    }));\n  } else if (focusItem !== null && focusItem !== void 0 && focusItem.parent) {\n    onFocusItem();\n  }\n}\n/**\n * Right arrow keyboard event handler\n * When focus is on a closed node, opens the node; focus does not move.\n * When focus is on a open node, moves focus to the first child node.\n * When focus is on an end node, does nothing.\n * @see https://www.w3.org/TR/wai-aria-practices/#TreeView\n */\n\nexport function rightArrowHandler(_ref6) {\n  var focusItem = _ref6.focusItem,\n    expand = _ref6.expand,\n    childrenKey = _ref6.childrenKey,\n    onExpand = _ref6.onExpand,\n    onFocusItem = _ref6.onFocusItem;\n  if (_isEmpty(focusItem) || !Array.isArray(focusItem[childrenKey])) {\n    return;\n  }\n  if (!expand) {\n    onExpand(_extends({}, focusItem, {\n      expand: expand\n    }));\n  } else {\n    onFocusItem();\n  }\n}\n/**\n * get scrollIndex in virtualized list\n * @param nodes - data\n * @param value - activeItem value\n * @param valueKey\n */\n\nexport var getScrollToIndex = function getScrollToIndex(nodes, value, valueKey) {\n  return nodes.filter(function (n) {\n    return n.visible;\n  }).findIndex(function (item) {\n    return item[valueKey] === value;\n  });\n};\n/**\n * when searching, expand state always return true\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return isSearching(searchKeyword) ? true : expand;\n}\nfunction getTreeActiveNode(nodes, value, valueKey) {\n  if (_isUndefined(value)) {\n    return undefined;\n  }\n  for (var refKey in nodes) {\n    if (shallowEqual(nodes[refKey][valueKey], value)) {\n      return nodes[refKey];\n    }\n  }\n}\nexport { getTreeActiveNode };\n/**\n * toggle tree node\n * @param param0\n */\n\nexport function toggleExpand(_ref7) {\n  var node = _ref7.node,\n    isExpand = _ref7.isExpand,\n    expandItemValues = _ref7.expandItemValues,\n    valueKey = _ref7.valueKey;\n  var newExpandItemValues = new Set(expandItemValues);\n  if (isExpand) {\n    newExpandItemValues.add(node[valueKey]);\n  } else {\n    newExpandItemValues.delete(node[valueKey]);\n  }\n  return Array.from(newExpandItemValues);\n}\nexport function getTreeNodeTitle(label) {\n  if (typeof label === 'string') {\n    return label;\n  } else if ( /*#__PURE__*/React.isValidElement(label)) {\n    var _nodes = reactToString(label);\n    return _nodes.join('');\n  }\n}\n/**\n * get all children from flattenNodes object by given parent node\n * @param nodes\n * @param parent\n */\n\nexport function getChildrenByFlattenNodes(nodes, parent) {\n  if (!_isNil(parent.refKey) && _isNil(nodes[parent.refKey])) {\n    return [];\n  }\n  return Object.values(nodes).filter(function (item) {\n    var _item$parent;\n    return (item === null || item === void 0 ? void 0 : (_item$parent = item.parent) === null || _item$parent === void 0 ? void 0 : _item$parent.refKey) === parent.refKey && item.refKey && !nodes[item.refKey].uncheckable;\n  });\n}\nexport function useTreeDrag() {\n  // current dragging node\n  var dragNode = useRef(null);\n  var _useState = useState(null),\n    dragOverNodeKey = _useState[0],\n    setDragOverNodeKey = _useState[1]; // drag node and it's children nodes key\n\n  var _useState2 = useState([]),\n    dragNodeKeys = _useState2[0],\n    setDragNodeKeys = _useState2[1];\n  var _useState3 = useState(null),\n    dropNodePosition = _useState3[0],\n    setDropNodePosition = _useState3[1];\n  var setDragNode = function setDragNode(node) {\n    dragNode.current = node;\n  };\n  return {\n    dragNode: dragNode === null || dragNode === void 0 ? void 0 : dragNode.current,\n    dragOverNodeKey: dragOverNodeKey,\n    dragNodeKeys: dragNodeKeys,\n    dropNodePosition: dropNodePosition,\n    setDragNode: setDragNode,\n    setDragOverNodeKey: setDragOverNodeKey,\n    setDragNodeKeys: setDragNodeKeys,\n    setDropNodePosition: setDropNodePosition\n  };\n}\n\n/**\n * hooks for flatten tree structure\n * @param param0\n */\nexport function useFlattenTreeData(_ref8) {\n  var data = _ref8.data,\n    labelKey = _ref8.labelKey,\n    valueKey = _ref8.valueKey,\n    childrenKey = _ref8.childrenKey,\n    _ref8$uncheckableItem = _ref8.uncheckableItemValues,\n    uncheckableItemValues = _ref8$uncheckableItem === void 0 ? [] : _ref8$uncheckableItem,\n    callback = _ref8.callback;\n  var _useState4 = useState(Object.create(null)),\n    dispatch = _useState4[1];\n  var forceUpdate = useCallback(function () {\n    dispatch(Object.create(null));\n  }, [dispatch]);\n  var flattenNodes = useRef({});\n  var flattenTreeData = useCallback(function (treeData, parent, layer) {\n    if (layer === void 0) {\n      layer = 1;\n    }\n    if (!Array.isArray(treeData) || treeData.length === 0) {\n      return [];\n    }\n    treeData.map(function (node) {\n      var _extends2;\n      var value = node[valueKey];\n      /**\n       * because the value of the node's type is string or number,\n       * so it can used as the key of the object directly\n       * to avoid number value is converted to string. 1 and '1' will be convert to '1'\n       *  we used `String_` or `Number_` prefix\n       */\n\n      var refKey = getNodeFormattedRefKey(value);\n      node.refKey = refKey;\n      flattenNodes.current[refKey] = _extends((_extends2 = {\n        layer: layer\n      }, _extends2[labelKey] = node[labelKey], _extends2[valueKey] = node[valueKey], _extends2.uncheckable = uncheckableItemValues.some(function (value) {\n        return shallowEqual(node[valueKey], value);\n      }), _extends2), node);\n      if (parent) {\n        flattenNodes.current[refKey].parent = _omit(parent, 'parent', 'children');\n      }\n      flattenTreeData(node[childrenKey], node, layer + 1);\n    });\n    callback === null || callback === void 0 ? void 0 : callback(flattenNodes.current);\n  }, [childrenKey, valueKey, labelKey, callback, uncheckableItemValues]);\n  var serializeListOnlyParent = useCallback(function (nodes, key) {\n    var list = [];\n    Object.keys(nodes).forEach(function (refKey) {\n      var currentNode = nodes[refKey];\n      if (!_isNil(currentNode.parent) && !_isNil(currentNode.parent.refKey)) {\n        var parentNode = nodes[currentNode.parent.refKey];\n        if (currentNode[key]) {\n          if (!(parentNode !== null && parentNode !== void 0 && parentNode.checkAll)) {\n            list.push(nodes[refKey][valueKey]);\n          } else if (parentNode !== null && parentNode !== void 0 && parentNode.uncheckable) {\n            list.push(nodes[refKey][valueKey]);\n          }\n        }\n      } else {\n        if (currentNode[key]) {\n          list.push(nodes[refKey][valueKey]);\n        }\n      }\n    });\n    return list;\n  }, [valueKey]);\n  /**\n   * using in CheckTreePicker, to unSerializeList check property\n   */\n\n  var unSerializeList = useCallback(function (_ref9) {\n    var nodes = _ref9.nodes,\n      key = _ref9.key,\n      _ref9$value = _ref9.value,\n      value = _ref9$value === void 0 ? [] : _ref9$value,\n      cascade = _ref9.cascade,\n      uncheckableItemValues = _ref9.uncheckableItemValues;\n    // Reset values to false\n    Object.keys(nodes).forEach(function (refKey) {\n      var node = nodes[refKey];\n      if (cascade && !_isNil(node.parent) && !_isNil(node.parent.refKey)) {\n        node[key] = nodes[node.parent.refKey][key];\n      } else {\n        node[key] = false;\n      }\n      value.forEach(function (value) {\n        if (shallowEqual(nodes[refKey][valueKey], value) && !uncheckableItemValues.some(function (uncheckableValue) {\n          return shallowEqual(value, uncheckableValue);\n        })) {\n          nodes[refKey][key] = true;\n        }\n      });\n    });\n  }, [valueKey]);\n  var formatVirtualizedTreeData = function formatVirtualizedTreeData(nodes, data, expandItemValues, options) {\n    var cascade = options.cascade,\n      searchKeyword = options.searchKeyword;\n    return UNSAFE_flattenTree(data, childrenKey, function (node) {\n      var formatted = {};\n      var curNode = nodes === null || nodes === void 0 ? void 0 : nodes[node.refKey];\n      var parentKeys = getNodeParentKeys(nodes, curNode, valueKey);\n      /**\n       * When using virtualized,\n       * if the parent node is collapsed, the child nodes should be hidden\n       * avoid component height calculation errors\n       */\n\n      var visible = curNode !== null && curNode !== void 0 && curNode.parent ? shouldShowNodeByParentExpanded(expandItemValues, parentKeys) : true;\n      /**\n       * when searching, every node default expand\n       * the node's visible should follow the original state\n       */\n\n      if (isSearching(searchKeyword)) {\n        visible = node.visible;\n      }\n      if (curNode) {\n        var checkState = !_isUndefined(cascade) ? getNodeCheckState({\n          node: curNode,\n          cascade: cascade,\n          nodes: nodes,\n          childrenKey: childrenKey\n        }) : undefined;\n        formatted = _extends({}, node, {\n          check: curNode.check,\n          uncheckable: curNode.uncheckable,\n          hasChildren: !!node[childrenKey],\n          layer: curNode.layer,\n          parent: curNode.parent,\n          checkState: checkState,\n          visible: visible\n        });\n      }\n      return formatted;\n    });\n  };\n  useEffect(function () {\n    // when data is changed, should clear the flattenNodes, avoid duplicate keys\n    flattenNodes.current = {};\n    flattenTreeData(data);\n  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    forceUpdate: forceUpdate,\n    flattenNodes: flattenNodes.current,\n    flattenTreeData: flattenTreeData,\n    serializeListOnlyParent: serializeListOnlyParent,\n    unSerializeList: unSerializeList,\n    formatVirtualizedTreeData: formatVirtualizedTreeData\n  };\n}\n/**\n * A hook that saving every tree node ref\n */\n\nexport function useTreeNodeRefs() {\n  var treeNodeRefs = useRef({});\n  var saveTreeNodeRef = function saveTreeNodeRef(ref, refKey) {\n    if (!_isNil(refKey)) {\n      treeNodeRefs.current[refKey] = ref;\n    }\n  };\n  return {\n    treeNodesRefs: treeNodeRefs.current,\n    saveTreeNodeRef: saveTreeNodeRef\n  };\n}\n\n/**\n * A hook that handles tree search filter options\n * @param props\n */\nexport function useTreeSearch(props) {\n  var labelKey = props.labelKey,\n    childrenKey = props.childrenKey,\n    searchKeyword = props.searchKeyword,\n    data = props.data,\n    searchBy = props.searchBy,\n    callback = props.callback;\n  var filterVisibleData = useCallback(function (data, searchKeyword) {\n    var setVisible = function setVisible(nodes) {\n      return nodes.forEach(function (item) {\n        item.visible = searchBy ? searchBy(searchKeyword, item[labelKey], item) : shouldDisplay(item[labelKey], searchKeyword);\n        if (_isArray(item[childrenKey])) {\n          filterVisibleData(item[childrenKey], searchKeyword);\n          item[childrenKey].forEach(function (child) {\n            if (child.visible) {\n              item.visible = child.visible;\n            }\n          });\n        }\n      });\n    };\n    setVisible(data);\n    return data;\n  }, [childrenKey, labelKey, searchBy]); // Use search keywords to filter options.\n\n  var _useState5 = useState(function () {\n      return searchKeyword !== null && searchKeyword !== void 0 ? searchKeyword : '';\n    }),\n    searchKeywordState = _useState5[0],\n    setSearchKeyword = _useState5[1];\n  var _useState6 = useState(function () {\n      return filterVisibleData(data, searchKeywordState);\n    }),\n    filteredData = _useState6[0],\n    setFilteredData = _useState6[1];\n  var handleSetFilteredData = useCallback(function (data, searchKeyword) {\n    setFilteredData(filterVisibleData(data, searchKeyword));\n  }, [filterVisibleData]);\n  var handleSearch = function handleSearch(searchKeyword, event) {\n    var filteredData = filterVisibleData(data, searchKeyword);\n    setFilteredData(filteredData);\n    setSearchKeyword(searchKeyword);\n    callback === null || callback === void 0 ? void 0 : callback(searchKeyword, filteredData, event);\n  };\n  return {\n    searchKeywordState: searchKeywordState,\n    filteredData: filteredData,\n    setFilteredData: handleSetFilteredData,\n    setSearchKeyword: setSearchKeyword,\n    handleSearch: handleSearch\n  };\n}\nexport function useGetTreeNodeChildren(treeData, valueKey, childrenKey) {\n  var _useState7 = useState([]),\n    loadingNodeValues = _useState7[0],\n    setLoadingNodeValues = _useState7[1];\n  var _useState8 = useState(treeData),\n    data = _useState8[0],\n    setData = _useState8[1];\n  var concatChildren = useCallback(function (treeNode, children) {\n    var value = treeNode[valueKey];\n    treeNode = findNodeOfTree(data, function (item) {\n      return value === item[valueKey];\n    });\n    treeNode[childrenKey] = children;\n    var newData = data.concat([]);\n    setData(newData);\n    return newData;\n  }, [data, valueKey, childrenKey]);\n  var loadChildren = useCallback(function (node, getChildren) {\n    setLoadingNodeValues(function (prev) {\n      return prev.concat(node[valueKey]);\n    });\n    var children = getChildren(node);\n    if (children instanceof Promise) {\n      children.then(function (res) {\n        var newData = concatChildren(node, res);\n        setData(newData);\n        setLoadingNodeValues(function (prev) {\n          return prev.filter(function (item) {\n            return !shallowEqual(item, node[valueKey]);\n          });\n        });\n      });\n    } else {\n      setData(concatChildren(node, children));\n      setLoadingNodeValues(function (prev) {\n        return prev.filter(function (item) {\n          return !shallowEqual(item, node[valueKey]);\n        });\n      });\n    }\n  }, [concatChildren, valueKey]);\n  return {\n    data: data,\n    setData: setData,\n    loadingNodeValues: loadingNodeValues,\n    loadChildren: loadChildren\n  };\n}\n\n/**\n * Focus to active tree node.\n * @param param0\n */\nexport function focusToActiveTreeNode(_ref10) {\n  var _activeItem$focus;\n  var list = _ref10.list,\n    valueKey = _ref10.valueKey,\n    activeNode = _ref10.activeNode,\n    virtualized = _ref10.virtualized,\n    container = _ref10.container,\n    selector = _ref10.selector,\n    formattedNodes = _ref10.formattedNodes;\n  if (!container) return;\n  if (virtualized && activeNode) {\n    var _list$scrollToRow;\n    var scrollIndex = getScrollToIndex(formattedNodes, activeNode === null || activeNode === void 0 ? void 0 : activeNode[valueKey], valueKey);\n    (_list$scrollToRow = list.scrollToRow) === null || _list$scrollToRow === void 0 ? void 0 : _list$scrollToRow.call(list, scrollIndex);\n    return;\n  }\n  var activeItem = container.querySelector(selector);\n  if (!activeItem) {\n    return;\n  }\n  activeItem === null || activeItem === void 0 ? void 0 : (_activeItem$focus = activeItem.focus) === null || _activeItem$focus === void 0 ? void 0 : _activeItem$focus.call(activeItem);\n}\nexport function isSearching(searchKeyword) {\n  return !_isEmpty(searchKeyword);\n}\nexport function getTreeNodeIndent(rtl, layer, absolute) {\n  var _ref12;\n  if (absolute === void 0) {\n    absolute = false;\n  }\n\n  // layer start from 1\n  var offset = layer * TREE_NODE_PADDING + TREE_NODE_ROOT_PADDING;\n  if (absolute) {\n    var _ref11;\n    return _ref11 = {}, _ref11[rtl ? 'right' : 'left'] = offset, _ref11;\n  }\n  return _ref12 = {}, _ref12[rtl ? 'paddingRight' : 'paddingLeft'] = offset, _ref12;\n}\n/**\n * according to the value type to get the formatted valueKey of the node\n * @param value\n * @returns\n */\n\nexport function getNodeFormattedRefKey(value) {\n  return \"\" + (typeof value === 'number' ? 'Number_' : 'String_') + value;\n}\n/**\n * create drag preview when tree node start drag\n * @param name\n * @param className\n * @returns\n */\n\nexport function createDragPreview(name, className) {\n  var dragPreview = document.createElement('div');\n  dragPreview.id = 'rs-tree-drag-preview';\n  dragPreview.innerHTML = name;\n  dragPreview.classList.add(className);\n  document.body.appendChild(dragPreview);\n  return dragPreview;\n}\n/**\n * remove drag preview when tree node drop\n */\n\nexport function removeDragPreview() {\n  var _dragPreview$parentNo, _dragPreview$parentNo2;\n  var dragPreview = document.getElementById('rs-tree-drag-preview');\n  dragPreview === null || dragPreview === void 0 ? void 0 : (_dragPreview$parentNo = dragPreview.parentNode) === null || _dragPreview$parentNo === void 0 ? void 0 : (_dragPreview$parentNo2 = _dragPreview$parentNo.removeChild) === null || _dragPreview$parentNo2 === void 0 ? void 0 : _dragPreview$parentNo2.call(_dragPreview$parentNo, dragPreview);\n}\nexport function stringifyTreeNodeLabel(label) {\n  if (typeof label === 'string') {\n    return label;\n  } else if ( /*#__PURE__*/React.isValidElement(label)) {\n    var _nodes2 = reactToString(label);\n    return _nodes2.join('');\n  }\n  return '';\n}","map":{"version":3,"names":["_extends","_isEmpty","_clone","_isNil","_isArray","_omit","_isUndefined","_intersection","React","useRef","useState","useEffect","useCallback","shallowEqualArray","getNodeCheckState","TREE_NODE_DROP_POSITION","shallowEqual","shouldDisplay","reactToString","TREE_NODE_PADDING","TREE_NODE_ROOT_PADDING","attachParent","TREE_NODE_GAP","shouldShowNodeByParentExpanded","expandItemValues","parentKeys","intersectionKeys","length","UNSAFE_flattenTree","tree","childrenKey","executor","flattenData","traverse","data","parent","forEach","item","index","node","push","flattenTree","rootNodes","getChildren","result","walkTree","callback","queue","concat","_node","shift","children","apply","getNodeParents","parentKey","valueKey","parents","getNodeParentKeys","nodes","_node$parent","refKey","_node$parent2","hasVisibleChildren","Array","isArray","some","child","visible","compareArray","a","b","getDefaultExpandItemValues","props","defaultExpandAll","_props$defaultExpandI","defaultExpandItemValues","filter","map","getExpandItemValues","getDragNodeKeys","dragNode","dragNodeKeys","calDropNodePosition","event","treeNodeElement","clientY","_treeNodeElement$getB","getBoundingClientRect","top","bottom","gap","DRAG_OVER_BOTTOM","DRAG_OVER_TOP","DRAG_OVER","removeDragNode","params","_ref","items","_index","_item","splice","createUpdateTreeDataFunction","_ref2","dropNode","dropNodePosition","cloneDragNode","updateTree","_index2","_item2","findNodeOfTree","check","findNode","i","_item3","_node2","undefined","filterNodesOfTree","findNodes","nextNodes","nextChildren","_item4","getFocusableItems","filteredData","isSearching","disabledItemValues","loop","disabled","disabledItem","expand","includes","getActiveIndex","focusItemValue","focusItems","activeIndex","getActiveItem","flattenNodes","nodeData","activeNode","Object","values","find","getElementByDataKey","dataKey","treeNodesRefs","selector","ele","Element","querySelector","focusTreeNode","treeNodeRefs","_node$focus","focus","call","focusNextItem","_ref3","focusableItems","nextIndex","nextFocusItemValue","focusPreviousItem","_ref4","prevIndex","prevFocusItemValue","leftArrowHandler","_ref5","focusItem","onExpand","onFocusItem","rightArrowHandler","_ref6","getScrollToIndex","value","n","findIndex","getExpandWhenSearching","searchKeyword","getTreeActiveNode","toggleExpand","_ref7","isExpand","newExpandItemValues","Set","add","delete","from","getTreeNodeTitle","label","isValidElement","_nodes","join","getChildrenByFlattenNodes","_item$parent","uncheckable","useTreeDrag","_useState","dragOverNodeKey","setDragOverNodeKey","_useState2","setDragNodeKeys","_useState3","setDropNodePosition","setDragNode","current","useFlattenTreeData","_ref8","labelKey","_ref8$uncheckableItem","uncheckableItemValues","_useState4","create","dispatch","forceUpdate","flattenTreeData","treeData","layer","_extends2","getNodeFormattedRefKey","serializeListOnlyParent","key","list","keys","currentNode","parentNode","checkAll","unSerializeList","_ref9","_ref9$value","cascade","uncheckableValue","formatVirtualizedTreeData","options","formatted","curNode","checkState","hasChildren","useTreeNodeRefs","saveTreeNodeRef","ref","useTreeSearch","searchBy","filterVisibleData","setVisible","_useState5","searchKeywordState","setSearchKeyword","_useState6","setFilteredData","handleSetFilteredData","handleSearch","useGetTreeNodeChildren","_useState7","loadingNodeValues","setLoadingNodeValues","_useState8","setData","concatChildren","treeNode","newData","loadChildren","prev","Promise","then","res","focusToActiveTreeNode","_ref10","_activeItem$focus","virtualized","container","formattedNodes","_list$scrollToRow","scrollIndex","scrollToRow","activeItem","getTreeNodeIndent","rtl","absolute","_ref12","offset","_ref11","createDragPreview","name","className","dragPreview","document","createElement","id","innerHTML","classList","body","appendChild","removeDragPreview","_dragPreview$parentNo","_dragPreview$parentNo2","getElementById","removeChild","stringifyTreeNodeLabel","_nodes2"],"sources":["/Users/kateishutina/Desktop/тестовые/TestForPicasso/testForPicasso/frontend/node_modules/rsuite/esm/utils/treeUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isArray from \"lodash/isArray\";\nimport _omit from \"lodash/omit\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _intersection from \"lodash/intersection\";\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { getNodeCheckState } from '../CheckTreePicker/utils';\nimport { TREE_NODE_DROP_POSITION, shallowEqual } from '../utils';\nimport { shouldDisplay } from '../Picker';\nimport reactToString from './reactToString';\nimport { TREE_NODE_PADDING, TREE_NODE_ROOT_PADDING } from './constants';\nimport { attachParent } from './attachParent';\n// gap of tree node\nvar TREE_NODE_GAP = 4;\n/**\n * according node parentNode expand state decide node whether to show\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByParentExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * flatten tree structure to array\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n *\n * @deprecated This {@link UNSAFE_flattenTree} function is considered unsafe because it mutates `tree` argument in-place\n *             Use {@link flattenTree} instead.\n */\n\nexport function UNSAFE_flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      flattenData.push(attachParent(node, parent));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\nexport function flattenTree(rootNodes, getChildren) {\n  var result = [];\n  walkTree(rootNodes, getChildren, function (node) {\n    return result.push(node);\n  });\n  return result;\n}\n\nfunction walkTree(rootNodes, getChildren, callback) {\n  for (var queue = [].concat(rootNodes); queue.length > 0;) {\n    var _node = queue.shift();\n\n    callback(_node);\n    var children = getChildren(_node);\n\n    if (children) {\n      queue.push.apply(queue, children);\n    }\n  }\n}\n/**\n * get all ancestor nodes of given node\n * @param {*} node\n */\n\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node !== null && node !== void 0 && node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * get all parentKeys of given node\n * @param nodes\n * @param node\n * @param valueKey\n */\n\nexport function getNodeParentKeys(nodes, node, valueKey) {\n  var parentKeys = [];\n\n  var traverse = function traverse(node) {\n    var _node$parent;\n\n    if (node !== null && node !== void 0 && (_node$parent = node.parent) !== null && _node$parent !== void 0 && _node$parent.refKey) {\n      var _node$parent2;\n\n      traverse(nodes[node.parent.refKey]);\n      parentKeys.push(node === null || node === void 0 ? void 0 : (_node$parent2 = node.parent) === null || _node$parent2 === void 0 ? void 0 : _node$parent2[valueKey]);\n    }\n  };\n\n  traverse(node);\n  return parentKeys;\n}\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * shallow equal array\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  return _isArray(a) && _isArray(b) && !shallowEqualArray(a, b);\n}\nexport function getDefaultExpandItemValues(data, props) {\n  var valueKey = props.valueKey,\n      defaultExpandAll = props.defaultExpandAll,\n      childrenKey = props.childrenKey,\n      _props$defaultExpandI = props.defaultExpandItemValues,\n      defaultExpandItemValues = _props$defaultExpandI === void 0 ? [] : _props$defaultExpandI;\n\n  if (defaultExpandAll) {\n    return UNSAFE_flattenTree(data, childrenKey).filter(function (item) {\n      return Array.isArray(item[childrenKey]) && item[childrenKey].length > 0;\n    }).map(function (item) {\n      return item[valueKey];\n    });\n  }\n\n  return defaultExpandItemValues;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * get dragNode and it's children node keys\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n      top = _treeNodeElement$getB.top,\n      bottom = _treeNodeElement$getB.bottom;\n\n  var gap = TREE_NODE_GAP; // bottom of node\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // top of node\n\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n      childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var _item = items[_index];\n\n      if (shallowEqual(_item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // when children is empty, delete children prop for hidden anchor\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n\n        break;\n      }\n\n      if (Array.isArray(_item[childrenKey])) {\n        traverse(_item[childrenKey], _item);\n      }\n    }\n  };\n\n  traverse(data);\n}\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n      childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n\n    var cloneDragNode = _extends({}, dragNode);\n\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var _item2 = items[_index2];\n\n        if (shallowEqual(_item2[valueKey], dropNode[valueKey])) {\n          // drag to node inside\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            _item2[childrenKey] = _isNil(_item2[childrenKey]) ? [] : _item2[childrenKey];\n\n            _item2[childrenKey].push(cloneDragNode);\n\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // drag to top of node\n            items.splice(_index2, 0, cloneDragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // drag to bottom of node\n            items.splice(_index2 + 1, 0, cloneDragNode);\n            break;\n          }\n        }\n\n        if (Array.isArray(_item2[childrenKey]) && _item2[childrenKey].length > 0) {\n          updateTree(_item2[childrenKey]);\n        }\n      }\n    };\n\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      var _item3 = nodes[i];\n\n      if (_isArray(_item3.children)) {\n        var _node2 = findNode(_item3.children);\n\n        if (_node2) {\n          return _node2;\n        }\n      }\n\n      if (check(_item3)) {\n        return _item3;\n      }\n    }\n\n    return undefined;\n  };\n\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    var nextNodes = [];\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n\n        if (nextChildren.length) {\n          var _item4 = _clone(nodes[i]);\n\n          _item4.children = nextChildren;\n          nextNodes.push(_item4);\n          continue;\n        }\n      }\n\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n\n    return nextNodes;\n  };\n\n  return findNodes(data);\n}\n/**\n * get all focusable items\n * exclude not visible and disabled node\n * @param filteredData - filtered tree data\n * @param props - TreeProps\n * @param isSearching - component is in Searching\n * @returns\n */\n\nexport var getFocusableItems = function getFocusableItems(filteredData, props, isSearching) {\n  var disabledItemValues = props.disabledItemValues,\n      valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var items = [];\n\n  var loop = function loop(nodes) {\n    nodes.forEach(function (node) {\n      var disabled = disabledItemValues.some(function (disabledItem) {\n        return shallowEqual(disabledItem, node[valueKey]);\n      });\n\n      if (!disabled && node.visible) {\n        items.push(node);\n      } // always expand when searching\n\n\n      var expand = isSearching ? true : expandItemValues.includes(node[valueKey]);\n\n      if (node[childrenKey] && expand) {\n        loop(node[childrenKey]);\n      }\n    });\n  };\n\n  loop(filteredData);\n  return items;\n};\n/**\n * return all focusable Item and active Element index\n * @param focusItemValue\n * @param focusableItems items\n */\n\nexport var getActiveIndex = function getActiveIndex(focusItemValue, focusItems, valueKey) {\n  var activeIndex = -1;\n  focusItems.forEach(function (item, index) {\n    if (shallowEqual(item[valueKey], focusItemValue)) {\n      activeIndex = index;\n    }\n  });\n  return activeIndex;\n};\n/**\n * get current active element and node data\n * @param flattenNodes - flattenData\n */\n\nexport var getActiveItem = function getActiveItem(focusItemValue, flattenNodes, valueKey) {\n  var nodeData = null;\n  var activeNode = Object.values(flattenNodes).find(function (node) {\n    return shallowEqual(node[valueKey], focusItemValue);\n  });\n\n  if (activeNode) {\n    nodeData = activeNode;\n  }\n\n  return nodeData;\n};\nexport var getElementByDataKey = function getElementByDataKey(dataKey, treeNodesRefs, selector) {\n  var ele = treeNodesRefs[dataKey];\n\n  if (ele instanceof Element) {\n    return ele.querySelector(selector);\n  }\n\n  return null;\n};\n/**\n * focus to specify tree node\n * @param refKey - target node refKey\n * @param treeNodeRefs - all tree node refs object\n * @param selector - node css selector\n */\n\nexport var focusTreeNode = function focusTreeNode(refKey, treeNodeRefs, selector) {\n  var _node$focus;\n\n  var node = getElementByDataKey(refKey, treeNodeRefs, selector);\n  node === null || node === void 0 ? void 0 : (_node$focus = node.focus) === null || _node$focus === void 0 ? void 0 : _node$focus.call(node);\n};\n\n/**\n * focus next item with keyboard\n * @param param\n */\nexport var focusNextItem = function focusNextItem(_ref3) {\n  var focusItemValue = _ref3.focusItemValue,\n      focusableItems = _ref3.focusableItems,\n      treeNodesRefs = _ref3.treeNodesRefs,\n      selector = _ref3.selector,\n      valueKey = _ref3.valueKey,\n      callback = _ref3.callback;\n  var activeIndex = getActiveIndex(focusItemValue, focusableItems, valueKey);\n\n  if (focusableItems.length === 0) {\n    return;\n  }\n\n  var nextIndex = activeIndex === focusableItems.length - 1 ? 0 : activeIndex + 1;\n  var nextFocusItemValue = focusableItems[nextIndex][valueKey];\n  callback === null || callback === void 0 ? void 0 : callback(nextFocusItemValue);\n  focusTreeNode(focusableItems[nextIndex].refKey, treeNodesRefs, selector);\n};\n/**\n * focus prev item with keyboard\n * @param param\n */\n\nexport var focusPreviousItem = function focusPreviousItem(_ref4) {\n  var focusItemValue = _ref4.focusItemValue,\n      focusableItems = _ref4.focusableItems,\n      treeNodesRefs = _ref4.treeNodesRefs,\n      selector = _ref4.selector,\n      valueKey = _ref4.valueKey,\n      callback = _ref4.callback;\n  var activeIndex = getActiveIndex(focusItemValue, focusableItems, valueKey);\n\n  if (focusableItems.length === 0) {\n    return;\n  }\n\n  var prevIndex = activeIndex === 0 ? focusableItems.length - 1 : activeIndex - 1;\n  prevIndex = prevIndex >= 0 ? prevIndex : 0;\n  var prevFocusItemValue = focusableItems[prevIndex][valueKey];\n  callback === null || callback === void 0 ? void 0 : callback(prevFocusItemValue);\n  focusTreeNode(focusableItems[prevIndex].refKey, treeNodesRefs, selector);\n};\n\n/**\n * Left arrow keyboard event handler\n * When focus is on an open node, closes the node.\n * When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n * When focus is on a root node that is also either an end node or a closed node, does nothing.\n * @see https://www.w3.org/TR/wai-aria-practices/#TreeView\n */\nexport function leftArrowHandler(_ref5) {\n  var focusItem = _ref5.focusItem,\n      expand = _ref5.expand,\n      onExpand = _ref5.onExpand,\n      onFocusItem = _ref5.onFocusItem;\n\n  if (_isEmpty(focusItem)) {\n    return;\n  }\n\n  if (expand) {\n    onExpand(_extends({}, focusItem, {\n      expand: expand\n    }));\n  } else if (focusItem !== null && focusItem !== void 0 && focusItem.parent) {\n    onFocusItem();\n  }\n}\n/**\n * Right arrow keyboard event handler\n * When focus is on a closed node, opens the node; focus does not move.\n * When focus is on a open node, moves focus to the first child node.\n * When focus is on an end node, does nothing.\n * @see https://www.w3.org/TR/wai-aria-practices/#TreeView\n */\n\nexport function rightArrowHandler(_ref6) {\n  var focusItem = _ref6.focusItem,\n      expand = _ref6.expand,\n      childrenKey = _ref6.childrenKey,\n      onExpand = _ref6.onExpand,\n      onFocusItem = _ref6.onFocusItem;\n\n  if (_isEmpty(focusItem) || !Array.isArray(focusItem[childrenKey])) {\n    return;\n  }\n\n  if (!expand) {\n    onExpand(_extends({}, focusItem, {\n      expand: expand\n    }));\n  } else {\n    onFocusItem();\n  }\n}\n/**\n * get scrollIndex in virtualized list\n * @param nodes - data\n * @param value - activeItem value\n * @param valueKey\n */\n\nexport var getScrollToIndex = function getScrollToIndex(nodes, value, valueKey) {\n  return nodes.filter(function (n) {\n    return n.visible;\n  }).findIndex(function (item) {\n    return item[valueKey] === value;\n  });\n};\n/**\n * when searching, expand state always return true\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return isSearching(searchKeyword) ? true : expand;\n}\n\nfunction getTreeActiveNode(nodes, value, valueKey) {\n  if (_isUndefined(value)) {\n    return undefined;\n  }\n\n  for (var refKey in nodes) {\n    if (shallowEqual(nodes[refKey][valueKey], value)) {\n      return nodes[refKey];\n    }\n  }\n}\n\nexport { getTreeActiveNode };\n/**\n * toggle tree node\n * @param param0\n */\n\nexport function toggleExpand(_ref7) {\n  var node = _ref7.node,\n      isExpand = _ref7.isExpand,\n      expandItemValues = _ref7.expandItemValues,\n      valueKey = _ref7.valueKey;\n  var newExpandItemValues = new Set(expandItemValues);\n\n  if (isExpand) {\n    newExpandItemValues.add(node[valueKey]);\n  } else {\n    newExpandItemValues.delete(node[valueKey]);\n  }\n\n  return Array.from(newExpandItemValues);\n}\nexport function getTreeNodeTitle(label) {\n  if (typeof label === 'string') {\n    return label;\n  } else if ( /*#__PURE__*/React.isValidElement(label)) {\n    var _nodes = reactToString(label);\n\n    return _nodes.join('');\n  }\n}\n/**\n * get all children from flattenNodes object by given parent node\n * @param nodes\n * @param parent\n */\n\nexport function getChildrenByFlattenNodes(nodes, parent) {\n  if (!_isNil(parent.refKey) && _isNil(nodes[parent.refKey])) {\n    return [];\n  }\n\n  return Object.values(nodes).filter(function (item) {\n    var _item$parent;\n\n    return (item === null || item === void 0 ? void 0 : (_item$parent = item.parent) === null || _item$parent === void 0 ? void 0 : _item$parent.refKey) === parent.refKey && item.refKey && !nodes[item.refKey].uncheckable;\n  });\n}\nexport function useTreeDrag() {\n  // current dragging node\n  var dragNode = useRef(null);\n\n  var _useState = useState(null),\n      dragOverNodeKey = _useState[0],\n      setDragOverNodeKey = _useState[1]; // drag node and it's children nodes key\n\n\n  var _useState2 = useState([]),\n      dragNodeKeys = _useState2[0],\n      setDragNodeKeys = _useState2[1];\n\n  var _useState3 = useState(null),\n      dropNodePosition = _useState3[0],\n      setDropNodePosition = _useState3[1];\n\n  var setDragNode = function setDragNode(node) {\n    dragNode.current = node;\n  };\n\n  return {\n    dragNode: dragNode === null || dragNode === void 0 ? void 0 : dragNode.current,\n    dragOverNodeKey: dragOverNodeKey,\n    dragNodeKeys: dragNodeKeys,\n    dropNodePosition: dropNodePosition,\n    setDragNode: setDragNode,\n    setDragOverNodeKey: setDragOverNodeKey,\n    setDragNodeKeys: setDragNodeKeys,\n    setDropNodePosition: setDropNodePosition\n  };\n}\n\n/**\n * hooks for flatten tree structure\n * @param param0\n */\nexport function useFlattenTreeData(_ref8) {\n  var data = _ref8.data,\n      labelKey = _ref8.labelKey,\n      valueKey = _ref8.valueKey,\n      childrenKey = _ref8.childrenKey,\n      _ref8$uncheckableItem = _ref8.uncheckableItemValues,\n      uncheckableItemValues = _ref8$uncheckableItem === void 0 ? [] : _ref8$uncheckableItem,\n      callback = _ref8.callback;\n\n  var _useState4 = useState(Object.create(null)),\n      dispatch = _useState4[1];\n\n  var forceUpdate = useCallback(function () {\n    dispatch(Object.create(null));\n  }, [dispatch]);\n  var flattenNodes = useRef({});\n  var flattenTreeData = useCallback(function (treeData, parent, layer) {\n    if (layer === void 0) {\n      layer = 1;\n    }\n\n    if (!Array.isArray(treeData) || treeData.length === 0) {\n      return [];\n    }\n\n    treeData.map(function (node) {\n      var _extends2;\n\n      var value = node[valueKey];\n      /**\n       * because the value of the node's type is string or number,\n       * so it can used as the key of the object directly\n       * to avoid number value is converted to string. 1 and '1' will be convert to '1'\n       *  we used `String_` or `Number_` prefix\n       */\n\n      var refKey = getNodeFormattedRefKey(value);\n      node.refKey = refKey;\n      flattenNodes.current[refKey] = _extends((_extends2 = {\n        layer: layer\n      }, _extends2[labelKey] = node[labelKey], _extends2[valueKey] = node[valueKey], _extends2.uncheckable = uncheckableItemValues.some(function (value) {\n        return shallowEqual(node[valueKey], value);\n      }), _extends2), node);\n\n      if (parent) {\n        flattenNodes.current[refKey].parent = _omit(parent, 'parent', 'children');\n      }\n\n      flattenTreeData(node[childrenKey], node, layer + 1);\n    });\n    callback === null || callback === void 0 ? void 0 : callback(flattenNodes.current);\n  }, [childrenKey, valueKey, labelKey, callback, uncheckableItemValues]);\n  var serializeListOnlyParent = useCallback(function (nodes, key) {\n    var list = [];\n    Object.keys(nodes).forEach(function (refKey) {\n      var currentNode = nodes[refKey];\n\n      if (!_isNil(currentNode.parent) && !_isNil(currentNode.parent.refKey)) {\n        var parentNode = nodes[currentNode.parent.refKey];\n\n        if (currentNode[key]) {\n          if (!(parentNode !== null && parentNode !== void 0 && parentNode.checkAll)) {\n            list.push(nodes[refKey][valueKey]);\n          } else if (parentNode !== null && parentNode !== void 0 && parentNode.uncheckable) {\n            list.push(nodes[refKey][valueKey]);\n          }\n        }\n      } else {\n        if (currentNode[key]) {\n          list.push(nodes[refKey][valueKey]);\n        }\n      }\n    });\n    return list;\n  }, [valueKey]);\n  /**\n   * using in CheckTreePicker, to unSerializeList check property\n   */\n\n  var unSerializeList = useCallback(function (_ref9) {\n    var nodes = _ref9.nodes,\n        key = _ref9.key,\n        _ref9$value = _ref9.value,\n        value = _ref9$value === void 0 ? [] : _ref9$value,\n        cascade = _ref9.cascade,\n        uncheckableItemValues = _ref9.uncheckableItemValues;\n    // Reset values to false\n    Object.keys(nodes).forEach(function (refKey) {\n      var node = nodes[refKey];\n\n      if (cascade && !_isNil(node.parent) && !_isNil(node.parent.refKey)) {\n        node[key] = nodes[node.parent.refKey][key];\n      } else {\n        node[key] = false;\n      }\n\n      value.forEach(function (value) {\n        if (shallowEqual(nodes[refKey][valueKey], value) && !uncheckableItemValues.some(function (uncheckableValue) {\n          return shallowEqual(value, uncheckableValue);\n        })) {\n          nodes[refKey][key] = true;\n        }\n      });\n    });\n  }, [valueKey]);\n\n  var formatVirtualizedTreeData = function formatVirtualizedTreeData(nodes, data, expandItemValues, options) {\n    var cascade = options.cascade,\n        searchKeyword = options.searchKeyword;\n    return UNSAFE_flattenTree(data, childrenKey, function (node) {\n      var formatted = {};\n      var curNode = nodes === null || nodes === void 0 ? void 0 : nodes[node.refKey];\n      var parentKeys = getNodeParentKeys(nodes, curNode, valueKey);\n      /**\n       * When using virtualized,\n       * if the parent node is collapsed, the child nodes should be hidden\n       * avoid component height calculation errors\n       */\n\n      var visible = curNode !== null && curNode !== void 0 && curNode.parent ? shouldShowNodeByParentExpanded(expandItemValues, parentKeys) : true;\n      /**\n       * when searching, every node default expand\n       * the node's visible should follow the original state\n       */\n\n      if (isSearching(searchKeyword)) {\n        visible = node.visible;\n      }\n\n      if (curNode) {\n        var checkState = !_isUndefined(cascade) ? getNodeCheckState({\n          node: curNode,\n          cascade: cascade,\n          nodes: nodes,\n          childrenKey: childrenKey\n        }) : undefined;\n        formatted = _extends({}, node, {\n          check: curNode.check,\n          uncheckable: curNode.uncheckable,\n          hasChildren: !!node[childrenKey],\n          layer: curNode.layer,\n          parent: curNode.parent,\n          checkState: checkState,\n          visible: visible\n        });\n      }\n\n      return formatted;\n    });\n  };\n\n  useEffect(function () {\n    // when data is changed, should clear the flattenNodes, avoid duplicate keys\n    flattenNodes.current = {};\n    flattenTreeData(data);\n  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    forceUpdate: forceUpdate,\n    flattenNodes: flattenNodes.current,\n    flattenTreeData: flattenTreeData,\n    serializeListOnlyParent: serializeListOnlyParent,\n    unSerializeList: unSerializeList,\n    formatVirtualizedTreeData: formatVirtualizedTreeData\n  };\n}\n/**\n * A hook that saving every tree node ref\n */\n\nexport function useTreeNodeRefs() {\n  var treeNodeRefs = useRef({});\n\n  var saveTreeNodeRef = function saveTreeNodeRef(ref, refKey) {\n    if (!_isNil(refKey)) {\n      treeNodeRefs.current[refKey] = ref;\n    }\n  };\n\n  return {\n    treeNodesRefs: treeNodeRefs.current,\n    saveTreeNodeRef: saveTreeNodeRef\n  };\n}\n\n/**\n * A hook that handles tree search filter options\n * @param props\n */\nexport function useTreeSearch(props) {\n  var labelKey = props.labelKey,\n      childrenKey = props.childrenKey,\n      searchKeyword = props.searchKeyword,\n      data = props.data,\n      searchBy = props.searchBy,\n      callback = props.callback;\n  var filterVisibleData = useCallback(function (data, searchKeyword) {\n    var setVisible = function setVisible(nodes) {\n      return nodes.forEach(function (item) {\n        item.visible = searchBy ? searchBy(searchKeyword, item[labelKey], item) : shouldDisplay(item[labelKey], searchKeyword);\n\n        if (_isArray(item[childrenKey])) {\n          filterVisibleData(item[childrenKey], searchKeyword);\n          item[childrenKey].forEach(function (child) {\n            if (child.visible) {\n              item.visible = child.visible;\n            }\n          });\n        }\n      });\n    };\n\n    setVisible(data);\n    return data;\n  }, [childrenKey, labelKey, searchBy]); // Use search keywords to filter options.\n\n  var _useState5 = useState(function () {\n    return searchKeyword !== null && searchKeyword !== void 0 ? searchKeyword : '';\n  }),\n      searchKeywordState = _useState5[0],\n      setSearchKeyword = _useState5[1];\n\n  var _useState6 = useState(function () {\n    return filterVisibleData(data, searchKeywordState);\n  }),\n      filteredData = _useState6[0],\n      setFilteredData = _useState6[1];\n\n  var handleSetFilteredData = useCallback(function (data, searchKeyword) {\n    setFilteredData(filterVisibleData(data, searchKeyword));\n  }, [filterVisibleData]);\n\n  var handleSearch = function handleSearch(searchKeyword, event) {\n    var filteredData = filterVisibleData(data, searchKeyword);\n    setFilteredData(filteredData);\n    setSearchKeyword(searchKeyword);\n    callback === null || callback === void 0 ? void 0 : callback(searchKeyword, filteredData, event);\n  };\n\n  return {\n    searchKeywordState: searchKeywordState,\n    filteredData: filteredData,\n    setFilteredData: handleSetFilteredData,\n    setSearchKeyword: setSearchKeyword,\n    handleSearch: handleSearch\n  };\n}\nexport function useGetTreeNodeChildren(treeData, valueKey, childrenKey) {\n  var _useState7 = useState([]),\n      loadingNodeValues = _useState7[0],\n      setLoadingNodeValues = _useState7[1];\n\n  var _useState8 = useState(treeData),\n      data = _useState8[0],\n      setData = _useState8[1];\n\n  var concatChildren = useCallback(function (treeNode, children) {\n    var value = treeNode[valueKey];\n    treeNode = findNodeOfTree(data, function (item) {\n      return value === item[valueKey];\n    });\n    treeNode[childrenKey] = children;\n    var newData = data.concat([]);\n    setData(newData);\n    return newData;\n  }, [data, valueKey, childrenKey]);\n  var loadChildren = useCallback(function (node, getChildren) {\n    setLoadingNodeValues(function (prev) {\n      return prev.concat(node[valueKey]);\n    });\n    var children = getChildren(node);\n\n    if (children instanceof Promise) {\n      children.then(function (res) {\n        var newData = concatChildren(node, res);\n        setData(newData);\n        setLoadingNodeValues(function (prev) {\n          return prev.filter(function (item) {\n            return !shallowEqual(item, node[valueKey]);\n          });\n        });\n      });\n    } else {\n      setData(concatChildren(node, children));\n      setLoadingNodeValues(function (prev) {\n        return prev.filter(function (item) {\n          return !shallowEqual(item, node[valueKey]);\n        });\n      });\n    }\n  }, [concatChildren, valueKey]);\n  return {\n    data: data,\n    setData: setData,\n    loadingNodeValues: loadingNodeValues,\n    loadChildren: loadChildren\n  };\n}\n\n/**\n * Focus to active tree node.\n * @param param0\n */\nexport function focusToActiveTreeNode(_ref10) {\n  var _activeItem$focus;\n\n  var list = _ref10.list,\n      valueKey = _ref10.valueKey,\n      activeNode = _ref10.activeNode,\n      virtualized = _ref10.virtualized,\n      container = _ref10.container,\n      selector = _ref10.selector,\n      formattedNodes = _ref10.formattedNodes;\n  if (!container) return;\n\n  if (virtualized && activeNode) {\n    var _list$scrollToRow;\n\n    var scrollIndex = getScrollToIndex(formattedNodes, activeNode === null || activeNode === void 0 ? void 0 : activeNode[valueKey], valueKey);\n    (_list$scrollToRow = list.scrollToRow) === null || _list$scrollToRow === void 0 ? void 0 : _list$scrollToRow.call(list, scrollIndex);\n    return;\n  }\n\n  var activeItem = container.querySelector(selector);\n\n  if (!activeItem) {\n    return;\n  }\n\n  activeItem === null || activeItem === void 0 ? void 0 : (_activeItem$focus = activeItem.focus) === null || _activeItem$focus === void 0 ? void 0 : _activeItem$focus.call(activeItem);\n}\nexport function isSearching(searchKeyword) {\n  return !_isEmpty(searchKeyword);\n}\nexport function getTreeNodeIndent(rtl, layer, absolute) {\n  var _ref12;\n\n  if (absolute === void 0) {\n    absolute = false;\n  }\n\n  // layer start from 1\n  var offset = layer * TREE_NODE_PADDING + TREE_NODE_ROOT_PADDING;\n\n  if (absolute) {\n    var _ref11;\n\n    return _ref11 = {}, _ref11[rtl ? 'right' : 'left'] = offset, _ref11;\n  }\n\n  return _ref12 = {}, _ref12[rtl ? 'paddingRight' : 'paddingLeft'] = offset, _ref12;\n}\n/**\n * according to the value type to get the formatted valueKey of the node\n * @param value\n * @returns\n */\n\nexport function getNodeFormattedRefKey(value) {\n  return \"\" + (typeof value === 'number' ? 'Number_' : 'String_') + value;\n}\n/**\n * create drag preview when tree node start drag\n * @param name\n * @param className\n * @returns\n */\n\nexport function createDragPreview(name, className) {\n  var dragPreview = document.createElement('div');\n  dragPreview.id = 'rs-tree-drag-preview';\n  dragPreview.innerHTML = name;\n  dragPreview.classList.add(className);\n  document.body.appendChild(dragPreview);\n  return dragPreview;\n}\n/**\n * remove drag preview when tree node drop\n */\n\nexport function removeDragPreview() {\n  var _dragPreview$parentNo, _dragPreview$parentNo2;\n\n  var dragPreview = document.getElementById('rs-tree-drag-preview');\n  dragPreview === null || dragPreview === void 0 ? void 0 : (_dragPreview$parentNo = dragPreview.parentNode) === null || _dragPreview$parentNo === void 0 ? void 0 : (_dragPreview$parentNo2 = _dragPreview$parentNo.removeChild) === null || _dragPreview$parentNo2 === void 0 ? void 0 : _dragPreview$parentNo2.call(_dragPreview$parentNo, dragPreview);\n}\nexport function stringifyTreeNodeLabel(label) {\n  if (typeof label === 'string') {\n    return label;\n  } else if ( /*#__PURE__*/React.isValidElement(label)) {\n    var _nodes2 = reactToString(label);\n\n    return _nodes2.join('');\n  }\n\n  return '';\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}